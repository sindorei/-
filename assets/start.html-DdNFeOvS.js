import{_ as a,c as l,f as s,o as n}from"./app-LHpjaFTr.js";const t={};function r(i,e){return n(),l("div",null,e[0]||(e[0]=[s(`<h1 id="nodejs-to-rust" tabindex="-1"><a class="header-anchor" href="#nodejs-to-rust"><span>NodeJs to Rust</span></a></h1><h2 id="相关工具" tabindex="-1"><a class="header-anchor" href="#相关工具"><span>相关工具</span></a></h2><ul><li><p>rustup （Rust版的nvm）</p><ul><li>负责管理Rust的安装以及额外的编译目标（如WebAssembly），除此之外还包含一些核心的工具，如cargo（Rust版的npm）、clippy（Rust版的eslint）、rustfmt（Rust版的prettier）</li><li><a href="https://www.rust-lang.org/tools/install" target="_blank" rel="noopener noreferrer">安装</a></li><li><code>rustup show</code> 查看当前安装的信息</li><li><code>rustup update</code> 更新到最新版本</li><li><code>rust-toolchain.toml</code> 申明工具链</li></ul></li><li><p>cargo</p><ul><li><p>默认源：<a href="https://crates.io/" target="_blank" rel="noopener noreferrer">crates.io</a></p></li><li><p>配置文件: Cargo.toml，格式为<a href="https://toml.io/en/" target="_blank" rel="noopener noreferrer">toml</a> * 更多配置信息见 <a href="https://doc.rust-lang.org/cargo/reference/manifest.html#the-manifest-format" target="_blank" rel="noopener noreferrer">The Manifest Format</a></p></li><li><p>初始化项目 * cargo init，在当前文件夹中初始化 * cargo new，指定一个文件夹初始化</p></li><li><p>全局安装工具</p><ul><li><code>cargo install</code></li><li><code>cargo install cargo-edit</code> <a href="https://github.com/killercup/cargo-edit" target="_blank" rel="noopener noreferrer">cargo-edit</a> * 安装后会新增4个子命令，add、rm、upgrade、set-version</li><li>安装在cargo的bin目录，通常是<code> ~/.cargo/bin</code></li></ul></li><li><p>安装依赖</p><ul><li><code>cargo add [dep]</code></li></ul></li><li><p>运行测试</p><ul><li><code>cargo test</code></li></ul></li><li><p>发布模块</p><ul><li><code>cargo publish</code></li></ul></li><li><p>运行任务</p><ul><li><code>cargo run</code> 运行一个代码</li><li><code>cargo bench</code> 分析一段代码的性能</li><li><code>cargo build</code></li><li><code>cargo clean</code> 清空打包目录（默认是target）</li><li><code>cargo doc</code>生成文档</li><li><a href="https://doc.rust-lang.org/cargo/reference/build-scripts.html" target="_blank" rel="noopener noreferrer">build scripts</a> 构建之前运行预构建等步骤</li><li><a href="https://github.com/casey/just" target="_blank" rel="noopener noreferrer">just</a>、cargo-make、cargo-cmd</li></ul></li></ul></li><li><p>Workspaces &amp; monorepos</p><ul><li>根目录中创建<code>Cargo.toml</code>文件</li></ul></li></ul><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml" data-title="toml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token table class-name">workspace</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">members</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token string">&quot;crates/*&quot;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>workspace中相互引用的各个模块可以指向本地的文件夹作为依赖项</li></ul><div class="language-toml line-numbers-mode" data-highlighter="prismjs" data-ext="toml" data-title="toml"><pre><code><span class="line"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token key property">other-project</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">&quot;../other-project&quot;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>额外工具 <ul><li>cargo-edit</li><li>cargo-workspaces</li><li>cargo-expand</li><li>tomlq</li></ul></li></ul><h2 id="vs-code-配置" tabindex="-1"><a class="header-anchor" href="#vs-code-配置"><span>vs code 配置</span></a></h2><ul><li>插件 <a href="https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer" target="_blank" rel="noopener noreferrer">rust-analyzer</a></li></ul>`,9)]))}const c=a(t,[["render",r],["__file","start.html.vue"]]),p=JSON.parse('{"path":"/pl/rust/start.html","title":"NodeJs to Rust","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"相关工具","slug":"相关工具","link":"#相关工具","children":[]},{"level":2,"title":"vs code 配置","slug":"vs-code-配置","link":"#vs-code-配置","children":[]}],"git":{"updatedTime":1711507372000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":4,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/rust/start.md"}');export{c as comp,p as data};
