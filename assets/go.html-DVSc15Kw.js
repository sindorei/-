import{_ as s,c as a,f as e,o as l}from"./app-LHpjaFTr.js";const i={};function p(t,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h1><ul><li><a href="https://golang.org/dl/" target="_blank" rel="noopener noreferrer">download</a></li></ul><h1 id="基本结构" tabindex="-1"><a class="header-anchor" href="#基本结构"><span>基本结构</span></a></h1><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="应用程序入口" tabindex="-1"><a class="header-anchor" href="#应用程序入口"><span>应用程序入口</span></a></h1><ul><li>必须是main包 <code>package main</code></li><li>必须是main方法 <code>func main()</code></li><li>文件名不一定是 <code>main.go</code></li></ul><h1 id="编写测试程序" tabindex="-1"><a class="header-anchor" href="#编写测试程序"><span>编写测试程序</span></a></h1><ul><li>源码文件以<code>_test</code>结尾：<code>xxx_test.go</code></li><li>引入测试包<code>import &quot;testing&quot;</code></li><li>测试方法以<code>Test</code>开头：<code>func TestXXX(t *testing.T) { ... }</code></li><li>运行测试 <code>go test -v</code></li></ul><h1 id="与其他主要编程语言差异" tabindex="-1"><a class="header-anchor" href="#与其他主要编程语言差异"><span>与其他主要编程语言差异</span></a></h1><h2 id="退出返回值" tabindex="-1"><a class="header-anchor" href="#退出返回值"><span>退出返回值</span></a></h2><ul><li>go中<code>main</code>函数不支持任何返回值</li><li>通过<code>os.Exit</code>来返回状态</li></ul><h2 id="获取命令行参数" tabindex="-1"><a class="header-anchor" href="#获取命令行参数"><span>获取命令行参数</span></a></h2><ul><li>程序中通过<code>os.Args</code>获取命令行参数</li></ul><h2 id="变量赋值" tabindex="-1"><a class="header-anchor" href="#变量赋值"><span>变量赋值</span></a></h2><ul><li>赋值可以进行自动类型推断</li><li>在一个赋值语句中可以对多个变量进行同时赋值</li></ul><h2 id="常量设置" tabindex="-1"><a class="header-anchor" href="#常量设置"><span>常量设置</span></a></h2><ul><li>快速设置连续值</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">    Monday <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line">    Tuesday</span>
<span class="line">    Wednesday</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">    Open <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token boolean">iota</span></span>
<span class="line">    Close</span>
<span class="line">    Pending</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换"><span>类型转换</span></a></h2><ul><li>Go语言不允许隐式类型转换</li><li>别名和原有类型也不能进行隐式类型转换</li></ul><h1 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h1><ul><li>bool</li><li>string</li><li>int int8 int16 int32 int64</li><li>uint uint8 uint16 uint32 uint64 uintptr</li><li>byte // alias for uint8</li><li>rune // alias for int32, represents a Unicode code point</li><li>float32 float64</li><li>complex64 complex128</li></ul><h1 id="类型的预定义值" tabindex="-1"><a class="header-anchor" href="#类型的预定义值"><span>类型的预定义值</span></a></h1><ul><li><code>math.MaxInt64</code></li><li><code>math.MaxFloat64</code></li><li><code>math.MaxUint32</code></li></ul><h1 id="指针类型" tabindex="-1"><a class="header-anchor" href="#指针类型"><span>指针类型</span></a></h1><ul><li>不支持指针运算</li><li><code>string</code>是值类型，其默认的初始值为空字符串，而不是<code>nil</code></li></ul><h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h1><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><ul><li>没有前置 <code>++</code>、 <code>--</code></li></ul><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h2><ul><li>用<code>==</code>比较数组 <ul><li>相同维数且含有相同个数元素的数组才可以比较</li><li>每个元素都相同的才相等</li></ul></li></ul><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h2><ul><li><code>&amp;^</code> 按位置零</li></ul><h1 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h1><ul><li>Go语言仅支持循环关键字<code>for</code></li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">n <span class="token operator">:=</span> <span class="token number">5</span></span>
<span class="line"><span class="token keyword">for</span> n <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    n<span class="token operator">++</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="if-条件" tabindex="-1"><a class="header-anchor" href="#if-条件"><span>if 条件</span></a></h1><ul><li>condition 表达式结果必须为布尔值</li><li>支持变量赋值</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">if</span> condition1 <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> condition2 <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">var</span> declaration<span class="token punctuation">;</span> condition <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="switch条件" tabindex="-1"><a class="header-anchor" href="#switch条件"><span>switch条件</span></a></h1><ul><li>条件表达式不限制为常量或整数</li><li>单个case中可以出现多个结果选项，使用逗号分隔 <code>case 1,2:</code></li><li>与C语言等规则相反，Go语言不需要break来明确退出一个case</li><li>可以不设定switch之后的条件表达式，在此种情况下，整个switch结构与多个if... else...的逻辑作用等同</li></ul><h1 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h1><h2 id="数组的声明" tabindex="-1"><a class="header-anchor" href="#数组的声明"><span>数组的声明</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span></span>
<span class="line">b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span></span>
<span class="line">c <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组的遍历" tabindex="-1"><a class="header-anchor" href="#数组的遍历"><span>数组的遍历</span></a></h2><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h2 id="数组截取" tabindex="-1"><a class="header-anchor" href="#数组截取"><span>数组截取</span></a></h2><ul><li><code>a[开始索引（包含）:结束索引(不包含)]</code></li><li><code>a[1:3]</code></li></ul><h1 id="切片" tabindex="-1"><a class="header-anchor" href="#切片"><span>切片</span></a></h1><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">var</span> s0 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span></span>
<span class="line">s0 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">s1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span></span>
<span class="line">s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// type len cap</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与数组相比" tabindex="-1"><a class="header-anchor" href="#与数组相比"><span>与数组相比</span></a></h2><ul><li>容量是否可伸缩 <ul><li>切片可伸缩，数组长度固定</li></ul></li><li>是否可以进行比较 <ul><li>数组可以比较，切片不行</li></ul></li></ul><h1 id="map" tabindex="-1"><a class="header-anchor" href="#map"><span>Map</span></a></h1><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line">m <span class="token operator">:=</span> Map<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">m1 <span class="token operator">:=</span> Map<span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">m1<span class="token punctuation">[</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line">m2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// type, initial capacity</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,54)]))}const o=s(i,[["render",p],["__file","go.html.vue"]]),u=JSON.parse('{"path":"/pl/go.html","title":"安装","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"退出返回值","slug":"退出返回值","link":"#退出返回值","children":[]},{"level":2,"title":"获取命令行参数","slug":"获取命令行参数","link":"#获取命令行参数","children":[]},{"level":2,"title":"变量赋值","slug":"变量赋值","link":"#变量赋值","children":[]},{"level":2,"title":"常量设置","slug":"常量设置","link":"#常量设置","children":[]},{"level":2,"title":"类型转换","slug":"类型转换","link":"#类型转换","children":[]},{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":2,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":2,"title":"数组的声明","slug":"数组的声明","link":"#数组的声明","children":[]},{"level":2,"title":"数组的遍历","slug":"数组的遍历","link":"#数组的遍历","children":[]},{"level":2,"title":"数组截取","slug":"数组截取","link":"#数组截取","children":[]},{"level":2,"title":"与数组相比","slug":"与数组相比","link":"#与数组相比","children":[]}],"git":{"updatedTime":1642763424000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":6,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/go.md"}');export{o as comp,u as data};
