import{_ as s,c as a,f as e,o as l}from"./app-LHpjaFTr.js";const t={};function i(p,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="控制结构" tabindex="-1"><a class="header-anchor" href="#控制结构"><span>控制结构</span></a></h1><h2 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句"><span>if语句</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">stat ::= if exp then block {elseif exp then block} [else block] end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">100</span></span>
<span class="line"><span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">then</span></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 的值为 10&quot;</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elseif</span><span class="token punctuation">(</span> a <span class="token operator">==</span> <span class="token number">20</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">then</span>  </span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 的值为 20&quot;</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;没有匹配 a 的值&quot;</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 的真实值为: &quot;</span><span class="token punctuation">,</span> a <span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环"><span>while循环</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">stat ::= while exp do block end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>示例：</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line"><span class="token keyword">while</span> a <span class="token operator">&lt;</span> <span class="token number">20</span></span>
<span class="line"><span class="token keyword">do</span></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a 的值为:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="line">   a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for循环" tabindex="-1"><a class="header-anchor" href="#for循环"><span>for循环</span></a></h2><h3 id="数字for循环" tabindex="-1"><a class="header-anchor" href="#数字for循环"><span>数字for循环</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">stat ::= for Name ‘=’ exp ‘,’ exp [‘,’ exp] do block end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">for var=start,end,step do  </span>
<span class="line">    &lt;执行体&gt;  </span>
<span class="line">end </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>var</code> 从 <code>start</code> 变化到 <code>end</code>，每次变化以 <code>step</code> 为步长递增 <code>var</code>，并执行一次 &quot;执行体&quot;。<code>step</code> 是可选的，如果不指定，默认为<code>1</code>。</p><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="泛型for循环" tabindex="-1"><a class="header-anchor" href="#泛型for循环"><span>泛型for循环</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">stat ::= for namelist in explist do block end</span>
<span class="line">namelist ::= Name {‘,’ Name}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">for var_1, ···, var_n in explist do body end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;three&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> <span class="token function">ipairs</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="repeat-until-循环" tabindex="-1"><a class="header-anchor" href="#repeat-until-循环"><span>repeat...until 循环</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">stat ::= repeat block until exp</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">a <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">repeat</span></span>
<span class="line">   <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;a的值为:&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span></span>
<span class="line">   a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">until</span> a <span class="token operator">&gt;</span> <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)]))}const o=s(t,[["render",i],["__file","control.html.vue"]]),r=JSON.parse('{"path":"/pl/lua/control.html","title":"控制结构","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"if语句","slug":"if语句","link":"#if语句","children":[]},{"level":2,"title":"while循环","slug":"while循环","link":"#while循环","children":[]},{"level":2,"title":"for循环","slug":"for循环","link":"#for循环","children":[{"level":3,"title":"数字for循环","slug":"数字for循环","link":"#数字for循环","children":[]},{"level":3,"title":"泛型for循环","slug":"泛型for循环","link":"#泛型for循环","children":[]},{"level":3,"title":"repeat...until 循环","slug":"repeat-until-循环","link":"#repeat-until-循环","children":[]}]}],"git":{"updatedTime":1674022245000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/lua/control.md"}');export{o as comp,r as data};
