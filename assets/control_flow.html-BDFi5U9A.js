import{_ as s,c as a,f as e,o as l}from"./app-LHpjaFTr.js";const p={};function t(i,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="控制结构" tabindex="-1"><a class="header-anchor" href="#控制结构"><span>控制结构</span></a></h1><h2 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h2><p>Python程序语言指定任何非<code>0</code>和非<code>None</code>值为<code>True</code>，<code>0</code> 或者 <code>None</code>为<code>False</code></p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">num <span class="token operator">=</span> <span class="token number">5</span> </span>
<span class="line"><span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 执行语句……</span></span>
<span class="line"><span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 执行语句……</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 执行语句……</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Python中没有<code>switch</code>语句</p><h2 id="循环语句" tabindex="-1"><a class="header-anchor" href="#循环语句"><span>循环语句</span></a></h2><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><p>没有 do..while 循环</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"><span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The count is:&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span></span>
<span class="line">   count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Bye!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环"><span>for 循环</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">for</span> iterating_var <span class="token keyword">in</span> sequence<span class="token punctuation">:</span></span>
<span class="line">   statements<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="循环控制语句" tabindex="-1"><a class="header-anchor" href="#循环控制语句"><span>循环控制语句</span></a></h3><ul><li><code>break</code></li><li><code>continue</code></li><li><code>pass</code> 空语句，是为了保持程序结构的完整性。</li></ul>`,13)]))}const c=s(p,[["render",t],["__file","control_flow.html.vue"]]),r=JSON.parse('{"path":"/pl/python/control_flow.html","title":"控制结构","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"条件语句","slug":"条件语句","link":"#条件语句","children":[]},{"level":2,"title":"循环语句","slug":"循环语句","link":"#循环语句","children":[{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]},{"level":3,"title":"for 循环","slug":"for-循环","link":"#for-循环","children":[]},{"level":3,"title":"循环控制语句","slug":"循环控制语句","link":"#循环控制语句","children":[]}]}],"git":{"updatedTime":1674024186000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":8,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/python/control_flow.md"}');export{c as comp,r as data};
