import{_ as i,c as a,f as p,o as e}from"./app-LHpjaFTr.js";const s="/note/assets/5e8835c3b5195d042f000000-CdvTfv6P.png",t="/note/assets/5e88363ab5195d042f000001-DnOe-JEv.png",n={};function u(r,l){return e(),a("div",null,l[0]||(l[0]=[p('<h1 id="分布式事务的解决方案" tabindex="-1"><a class="header-anchor" href="#分布式事务的解决方案"><span>分布式事务的解决方案</span></a></h1><ul><li>2PC</li><li>3PC</li><li>TCC</li><li>Saga</li><li>本地消息表</li></ul><h1 id="_2pc-订单与优惠券的数据一致性问题" tabindex="-1"><a class="header-anchor" href="#_2pc-订单与优惠券的数据一致性问题"><span>2PC：订单与优惠券的数据一致性问题</span></a></h1><ul><li><p>2PC：二阶段提交</p></li><li><p>订单系统需要</p><ul><li>在“订单优惠券表”中写入订单关联的优惠券数据</li><li>在“订单表”中写入订单数据</li></ul></li><li><p>促销系统</p><ul><li>把已使用的优惠券张婷更新为“已使用”</li></ul></li><li><p>如何用2PC解决</p><ul><li><p>引入事务协调者角色，协调订单系统和促销系统</p></li><li><p>准备阶段</p><ul><li>协调者分别给订单系统和促销系统发送准备命令</li><li>订单系统和促销系统收到命令之后开始执行准备操作（除提交数据库事务之外的所有工作）</li></ul></li><li><p>提交阶段</p><ul><li>协调者给两个系统发送“提交”命令</li><li>每个系统提交自己的数据库事务，然后给协调者返回“提交成功”响应</li><li>协调者收到所有响应之后，给客户端返回成功响应</li></ul></li></ul></li><li><p>异常情况</p><ul><li>准备阶段任何一部出现错误或者超市，协调者给两个系统发送“回滚事务”请求，每个系统收到后回滚自己的数据库事务</li><li>准备阶段成功，进入提交阶段。整个分布式事务只能成功不能失败。如发生网络传输失败需反复重试，直到提交成功为止</li></ul></li><li><p>时序图 <img src="'+s+'" alt=""><img src="'+t+'" alt=""></p></li><li><p>事务协调服务</p><ul><li><p>没必要单独启动</p></li><li><p>最好和订单服务或优惠券服务放在同一个进程里</p></li><li><p>好处</p><ul><li>参与分布式事务的进程更少，故障点也就更少，稳定性更好</li><li>减少了一些远程调用，性能也更好</li></ul></li></ul></li><li><p>2PC优缺点</p><ul><li>优点：适合对数据一致性要求高的场景</li><li>缺点：事务的执行过程需要阻塞服务端的线程和数据库的会话。高并发场景下性能不高。协调者是一个单点，一旦过程中协调者宕机就会导致订单库或者促销库的事务会话一直卡在等待提交阶段，直到事务超时自动回滚</li></ul></li><li><p>适用场景</p><ul><li>需要强一致性</li><li>并发量不大</li></ul></li></ul><h1 id="本地消息表-订单与购物车的数据一致性问题" tabindex="-1"><a class="header-anchor" href="#本地消息表-订单与购物车的数据一致性问题"><span>本地消息表：订单与购物车的数据一致性问题</span></a></h1><ul><li><p>点击去结算按钮系统做的两件事</p><ul><li>订单系统创建新订单，关联商品就是购物车中选择的商品</li><li>创建订单成功后，购物车系统需要把订单中的商品从购物车中删除</li></ul></li><li><p>清空购物车操作对一致性要求没有扣减优惠券高</p></li><li><p>只要保证经过一个小的延迟时间后，最终订单数据和购物车保持一致</p></li><li><p>本地消息表实现思路</p><ul><li>订单服务收到下单请求后，正常使用订单库的事务去更新订单的数据</li><li>在执行数据库事务过程中，本地记录一条消息</li><li>这个消息就是一个日志，内容就是情况购物车操作</li><li>日志记录在本地，没有分布式问题，就是一个普通的单机事务，可以让订单库的事务来保证记录本地消息和订单库的一致性</li><li>完成后给客户端返回成功响应</li><li>再用一个异步服务去读取本地消息，调用购物车系统的服务清空购物车</li><li>购物车清空之后，把本地消息的状态更新成已完成</li><li>异步清空购物车过程中失败了，可通过重试解决</li><li>最终可以保证订单系统和购物车系统的数据是一致的</li></ul></li><li><p>本地消息表</p><ul><li>文件形式，保存在订单服务所在服务器的本地磁盘中</li><li>订单库中</li><li>消息队列RocketMQ 事务消息</li></ul></li><li><p>优缺点：</p><ul><li>缺点：本地消息表只能满足D，A、C、I都比较差</li><li>优点 <ul><li>实现简单，单机事务的基础上稍加改造就可以实现分布式事务</li><li>性能非常好，和单机事务的性能几乎没有差别，还提供了大部分情况下都能接受的数据最终一致性</li></ul></li></ul></li></ul><h1 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h1><ul><li>3PC、TCC</li></ul><h1 id="上节思考" tabindex="-1"><a class="header-anchor" href="#上节思考"><span>上节思考</span></a></h1><ul><li><p>RC和RR在并发更新数据时都需要对数据加锁（一般是行锁）</p></li><li><p>二个事务同事更新一条记录时，先更新的事务会抢占锁，在它结束事务之前，其他需要更新这条记录的事务都会卡住等待这个锁</p></li><li><p>这点两种隔离级别是一样的</p></li></ul>',10)]))}const o=i(n,[["render",u],["__file","05.html.vue"]]),h=JSON.parse('{"path":"/geektime/back-end-storage-practical-lession/05.html","title":"分布式事务的解决方案","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1645920694000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":2,"url":"https://github.com/sindorei"}]},"filePathRelative":"geektime/back-end-storage-practical-lession/05.md"}');export{o as comp,h as data};
