import{_ as t,c as a,f as i,o as e}from"./app-LHpjaFTr.js";const d={};function r(s,l){return e(),a("div",null,l[0]||(l[0]=[i('<h1 id="最小化账户系统" tabindex="-1"><a class="header-anchor" href="#最小化账户系统"><span>最小化账户系统</span></a></h1><ul><li>user_id</li><li>balance</li><li>timestamp</li></ul><h1 id="为什么总对不上账" tabindex="-1"><a class="header-anchor" href="#为什么总对不上账"><span>为什么总对不上账</span></a></h1><ul><li>本质问题：冗余数据的一致性问题</li><li>需要记录账户流水 <ul><li>流水ID</li><li>交易金额</li><li>交易时间</li><li>交易双方系统、账户、交易单号等</li></ul></li></ul><h2 id="账户流水设计原则" tabindex="-1"><a class="header-anchor" href="#账户流水设计原则"><span>账户流水设计原则</span></a></h2><ul><li>流水记录只能新增，一旦记录成功不允许修改和删除。由于正当原因需要取消一笔完成的交易，应再记录一笔取消交易的流水</li><li>流水号必须是递增的，需要用流水号来确定交易的先后顺序</li></ul><h1 id="使用数据库事务保证数据一致性" tabindex="-1"><a class="header-anchor" href="#使用数据库事务保证数据一致性"><span>使用数据库事务保证数据一致性</span></a></h1><ul><li>事务的ACID四个基本特性 <ul><li>原子性 Atomic <ul><li>要么都成功，要没都失败</li></ul></li><li>一致性 Consistency <ul><li>保证督导的数据（交易和流水）总是一直的</li></ul></li><li>隔离性 Isolation <ul><li>未提交的事务不应该在其他事务中读取到</li></ul></li><li>持久性 Durability <ul><li>事务提交成功，数据一定会被持久化到磁盘中</li></ul></li></ul></li></ul><h1 id="理解事务的隔离级别" tabindex="-1"><a class="header-anchor" href="#理解事务的隔离级别"><span>理解事务的隔离级别</span></a></h1><ul><li>要完全满足ACID，所有的事务和SQL都只能串行执行，不能满足一般系统的要求</li><li>对账户系统和其他大多数交易系统来说，事务的原子性和持久性是必须要保证的，一致性和隔离性可做适当牺牲</li></ul><h2 id="mysql提供了四种隔离级别" tabindex="-1"><a class="header-anchor" href="#mysql提供了四种隔离级别"><span>MySQL提供了四种隔离级别</span></a></h2><table><thead><tr><th>隔离级别</th><th>脏读 <br> DR(Dirty Read)</th><th>不可重复读<br>NR(NonRepeatable Read)</th><th>幻读<br>PR(Phantom Read)</th></tr></thead><tbody><tr><td>能读到未提交的数据<br>RU(READ-UNCOMMITTED)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>能读到已提交的数据<br>RC(READ-COMMITTED)</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>可重复读<br>RR(REPEATABLE-READ)</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>串行执行<br>SERIALIZABLE</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><h2 id="兼顾并发、性能和数据一致性的交易实现" tabindex="-1"><a class="header-anchor" href="#兼顾并发、性能和数据一致性的交易实现"><span>兼顾并发、性能和数据一致性的交易实现</span></a></h2><ul><li>RC和RR都是安全的</li></ul><h1 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h1><ul><li>多个事务并发更新同一个账户时，RC和RR两种不同的隔离级别在行为上有什么不同</li></ul>',16)]))}const h=t(d,[["render",r],["__file","04.html.vue"]]),c=JSON.parse('{"path":"/geektime/back-end-storage-practical-lession/04.html","title":"最小化账户系统","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"账户流水设计原则","slug":"账户流水设计原则","link":"#账户流水设计原则","children":[]},{"level":2,"title":"MySQL提供了四种隔离级别","slug":"mysql提供了四种隔离级别","link":"#mysql提供了四种隔离级别","children":[]},{"level":2,"title":"兼顾并发、性能和数据一致性的交易实现","slug":"兼顾并发、性能和数据一致性的交易实现","link":"#兼顾并发、性能和数据一致性的交易实现","children":[]}],"git":{"updatedTime":1644980618000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"geektime/back-end-storage-practical-lession/04.md"}');export{h as comp,c as data};
