import{_ as i,c as a,f as e,o as s}from"./app-LHpjaFTr.js";const n={};function t(d,l){return s(),a("div",null,l[0]||(l[0]=[e(`<h1 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span>主要功能</span></a></h1><ul><li>把商品加入购物车</li><li>购物车列表页</li><li>发起结算下单</li><li>所有界面都要显示的购物车小图标</li></ul><h1 id="设计购物车存储时需要把握什么原则" tabindex="-1"><a class="header-anchor" href="#设计购物车存储时需要把握什么原则"><span>设计购物车存储时需要把握什么原则</span></a></h1><ul><li>如果未登录，需要临时暂存购物车的商品</li><li>用户登录时，把暂存购物车的商品合并到用户购物车中，并且清除暂存购物车</li><li>用户登录后购物车中的商品，需要在浏览器、手机APP和微信等终端中保持同步</li></ul><h1 id="如何设计-暂存购物车-的存储" tabindex="-1"><a class="header-anchor" href="#如何设计-暂存购物车-的存储"><span>如何设计&quot;暂存购物车&quot;的存储</span></a></h1><ul><li>保存在客户端好，节约存储资源，也不需要唯一标识</li><li>可根据情况选择cookie或localStorage</li><li>数据格式示例：</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;cart&quot;: [</span>
<span class="line">        &quot;SKUID&quot;: 888,</span>
<span class="line">        &quot;tiemstamp&quot;: 1578721136,</span>
<span class="line">        &quot;count&quot;: 1,</span>
<span class="line">        &quot;selected&quot;: true</span>
<span class="line">    ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="如何设计-用户购物车-的存储" tabindex="-1"><a class="header-anchor" href="#如何设计-用户购物车-的存储"><span>如何设计&quot;用户购物车&quot;的存储</span></a></h1><ul><li>存在MySQL中 <ul><li>便于应对变化，系统的扩展性更好</li><li>表结构 <ul><li>id 自增id</li><li>user_id 用户ID</li><li>sku_id 商品ID</li><li>count 商品数量</li><li>timestamp 加购时间</li><li>selected 选购状态</li></ul></li></ul></li><li>也可以选择Redis存储 <ul><li>牺牲一点数据可靠性，换来更高的性能</li><li>HASH</li></ul></li></ul><h1 id="思考题" tabindex="-1"><a class="header-anchor" href="#思考题"><span>思考题</span></a></h1><ul><li>数据存在MySQL,用redis做缓存，是否可行？可行的话如何保证redis中的数据和MySQL中的一致</li></ul><h1 id="上节思考题" tabindex="-1"><a class="header-anchor" href="#上节思考题"><span>上节思考题</span></a></h1><ul><li>商品系统中需要保存包含价格的商品基本信息的历史记录，对每次变更记录一个自增的版本号</li><li>下单的请求中不仅要带上SKUID，还要带上版本号</li><li>订单服务以请求中的商品版本对应的价格来创建订单</li><li>需要增加检测逻辑，防止被恶意利用此机制 <ul><li>请求中的版本只能是当前版本或上一个版本</li><li>并使用上一个版本有时间限制 <ul><li>如调价5s后不再接受上个版本的请求</li></ul></li></ul></li></ul>`,13)]))}const c=i(n,[["render",t],["__file","03.html.vue"]]),u=JSON.parse('{"path":"/geektime/back-end-storage-practical-lession/03.html","title":"主要功能","lang":"zh-CN","frontmatter":{},"headers":[],"git":{"updatedTime":1644980618000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"geektime/back-end-storage-practical-lession/03.md"}');export{c as comp,u as data};
