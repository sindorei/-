import{_ as s,c as a,f as p,o as e}from"./app-LHpjaFTr.js";const t={};function c(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="libuv-的流机制" tabindex="-1"><a class="header-anchor" href="#libuv-的流机制"><span>libuv 的流机制</span></a></h1><h2 id="流是什么" tabindex="-1"><a class="header-anchor" href="#流是什么"><span>流是什么？</span></a></h2><p>流是一种数据处理的机制，主要用来解决生产者 / 消费者之间不同步的问题。比如说，如果进程想往一个目的地写入数据但无法写入，进程就会被阻塞，后面的事件也就都无法继续进行。同样地，如果一个进程想读取数据，但数据还没有准备好，进程就需要一直等待而不能做其他事情。面对这些不合理的情况，流机制借助事件驱动模块的能力，封装了数据处理的具体逻辑，简化了上层调用者的成本。我们除了需要了解流的概念和作用，还需要深入了解和理解其工作原理。</p><p>在 Libuv 中流是围绕着文件描述符进行工作的，当我们想对文件描述符执行读写等操作时，我们不会直接操作这个文件描述符，而是由流机制进行管理，因为当我们进行读写操作时，当前并不一定满足条件。也就是说，当我们想从文件描述符中读取数据时，当前可能没有数据可以读，写入数据时同理。这时候，Libuv 会先在流中记录相关的操作和数据，然后 Libuv 会往事件驱动模块注册相应的事件，等到事件触发时才进行真正的读写，并通过回调来通知用户事件的发生。</p><p>那么，流具体是如何实现的呢？在流的实现中，最核心的数据结构是 IO 观察者（封装了文件描述符、感兴趣的事情和回调），其余的字段和流的操作相关，比如读一个流，写一个流，关闭一个流，在流中都有对应的字段去支持。</p><p>读一个流时，注册 IO 观察者中文件描述符的可读事件，可读事件触发时执行用户的读回调。 写一个流，先把数据写到流队列中，然后等到 IO 观察者中文件描述符的可写事件触发时，执行写入，并执行用户的写完成回调，但是如果当前待写队列为空，则会先尝试执行一次写入，因为文件描述符是非阻塞的，所以写入失败也没关系，可写事件触发时再写就行。 关闭一个流，就是 IO 观察者中文件描述符的可写事件触发时，如果待写的数据已经写完，然后执行关闭流操作。 流通过 IO 观察者，并结合事件驱动模块，很好地解决了生产者和消费者同步的问题。下面具体讲一下流在 Libuv 中的实现，首先看一下流的初始化。</p><h3 id="初始化流" tabindex="-1"><a class="header-anchor" href="#初始化流"><span>初始化流</span></a></h3><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">uv__stream_init</span><span class="token punctuation">(</span><span class="token class-name">uv_loop_t</span><span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">,</span> uv_handle_type type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 初始化 handle</span></span>
<span class="line">    <span class="token function">uv__handle_init</span><span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uv_handle_t</span><span class="token operator">*</span><span class="token punctuation">)</span>stream<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 各种操作的回调</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>read_cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>alloc_cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>close_cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>connection_cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 各种操作对应的上下文结构体</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>connect_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>shutdown_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 接收的 TCP 连接或者传递过来的文件描述符</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>accepted_fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>queued_fds <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 操作对应的错误码</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>delayed_error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 写操作相关的数据结构</span></span>
<span class="line">    <span class="token function">QUEUE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">QUEUE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_completed_queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>write_queue_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">        初始化 IO 观察者，把文件描述符（这里还没有，所以是 -1）和</span>
<span class="line">        回调 uv__stream_io 记录在 io_watcher 上</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token function">uv__io_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> uv__stream_io<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流的初始化主要是初始化了一些字段，来记录流操作的一些上下文，例如。</p><p>TCP 服务器（流）发起 listen 时会传入一个回调并记录到 connection_cb 中，当连接到来时会执行 connection_cb。 TCP 客户端（流）发起连接时的上下文就会记录到 connect_req，当连接结束后执行 connect_req 的回调。 往流写入数据时，数据会先被记录到 write_queue 队列中等待写入。 可以看到，针对流的操作几乎都是异步的，即发起操作和执行真正的操作是分开进行的。因此，流就需要额外的字段来记录这些操作上下文，这样当满足操作条件时，流才能根据保存的上下文进行操作。另外我们还可以看到，流的所有操作对应的回调都是 uv__stream_io，在uv__stream_io 会针对触发的事件进行不同的处理。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__stream_io</span><span class="token punctuation">(</span><span class="token class-name">uv_loop_t</span><span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token class-name">uv__io_t</span><span class="token operator">*</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  stream <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token class-name">uv_stream_t</span><span class="token punctuation">,</span> io_watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 连接操作</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>connect_req<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">uv__stream_connect</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 触发了可读事件，执行读操作</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>POLLIN <span class="token operator">|</span> POLLERR <span class="token operator">|</span> POLLHUP<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">uv__read</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">  <span class="token comment">// 读回调关闭了流</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">  <span class="token comment">// 对端关闭了</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>events <span class="token operator">&amp;</span> POLLHUP<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">      <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_READING<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">      <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_READ_PARTIAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">      <span class="token operator">!</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_READ_EOF<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">uv_buf_t</span> buf <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv__stream_eof</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 流关闭了</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">/* read_cb closed stream. */</span></span>
<span class="line">    </span>
<span class="line">  <span class="token comment">// 可写事件触发</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>POLLOUT <span class="token operator">|</span> POLLERR <span class="token operator">|</span> POLLHUP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">uv__write</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv__write_callbacks</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 待写队列为空</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">uv__drain</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这里面涉及所有流的操作逻辑，所以暂时不深入讲解，在下面的内容中会具体分析每一个操作的实现。</p><p>前面讲到，流是围绕着文件描述符进行工作的，但我们发现初始化时，还没有文件描述符。文件描述符通常是在真正使用流的时候才会实时创建，比如当我们通过 Node.js 创建一个 TCP 服务器时，只有在调用 listen 的时候，Node.js 才会通过 Libuv 创建对应的文件描述符（具体是在 bind 操作时）。有了文件描述符之后，就可以通过 uv__stream_open 设置到流中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">uv__stream_open</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置流的标记</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> flags<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 针对 TCP 流的处理</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>type <span class="token operator">==</span> UV_TCP<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 关闭 nagle 算法</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_TCP_NODELAY<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">uv__tcp_nodelay</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 开启 TCP KEEPALIVE</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_TCP_KEEPALIVE<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">uv__tcp_keepalive</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 保存文件描述符到 IO 观察者中</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">.</span>fd <span class="token operator">=</span> fd<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv__stream_open 主要是记录文件描述符和标记到流的结构体中，有了文件描述符，后续就可以操作这个流了。下面我们一起看看具体的操作。</p><h3 id="对流发起一个连接" tabindex="-1"><a class="header-anchor" href="#对流发起一个连接"><span>对流发起一个连接</span></a></h3><p>连接操作是针对面向连接的流，如 TCP、Unix 域。因为 TCP 和 Unix 域的实现类似，所以这里以 TCP 连接为例。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">uv__tcp_connect</span><span class="token punctuation">(</span><span class="token class-name">uv_connect_t</span><span class="token operator">*</span> req<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token class-name">uv_tcp_t</span><span class="token operator">*</span> handle<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span> addr<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> addrlen<span class="token punctuation">,</span></span>
<span class="line">                    uv_connect_cb cb<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> r<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建一个用于通信的 socket，把 socket 对应的 fd 保存到 handle 中</span></span>
<span class="line">  <span class="token function">maybe_new_socket</span><span class="token punctuation">(</span>handle<span class="token punctuation">,</span></span>
<span class="line">                   addr<span class="token operator">-&gt;</span>sa_family<span class="token punctuation">,</span></span>
<span class="line">                   UV_HANDLE_READABLE <span class="token operator">|</span> UV_HANDLE_WRITABLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">    errno <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 发起对 addr 的连接</span></span>
<span class="line">    r <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> addrlen<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 连接还没有成功或者直接失败了</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINPROGRESS<span class="token punctuation">)</span> <span class="token comment">// 连接中，正常状态</span></span>
<span class="line">      <span class="token punctuation">;</span> <span class="token comment">/* not an error */</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> ECONNREFUSED<span class="token punctuation">)</span> <span class="token comment">// 直接返回连接失败，比如 Unix 域</span></span>
<span class="line">      handle<span class="token operator">-&gt;</span>delayed_error <span class="token operator">=</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 初始化一个连接请求</span></span>
<span class="line">  <span class="token function">uv__req_init</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> req<span class="token punctuation">,</span> UV_CONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  req<span class="token operator">-&gt;</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>
<span class="line">  req<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span><span class="token punctuation">)</span> handle<span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">QUEUE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  handle<span class="token operator">-&gt;</span>connect_req <span class="token operator">=</span> req<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 注册可写事件</span></span>
<span class="line">  <span class="token function">uv__io_start</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 连接出错，插入pending队列，而不是直接执行上层回调</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>delayed_error<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">uv__io_feed</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连接操作首先会直接调用系统函数 connect 发起一个连接，因为文件描述符是非阻塞的，所以不会导致进程阻塞。对于 TCP 连接，这时候就会发起三次握手，然后返回错误码 EINPROGRESS。接着 Libuv 就会把连接请求的上下文保存到 connect_req，等待三次握手结束时进行下一步处理。接着，我们来看连接结束后的逻辑。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__stream_connect</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">int</span> error<span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">uv_connect_t</span><span class="token operator">*</span> req <span class="token operator">=</span> stream<span class="token operator">-&gt;</span>connect_req<span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">socklen_t</span> errorsize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 处理在 uv__tcp_connect 中发起连接时的出错</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>delayed_error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    error <span class="token operator">=</span> stream<span class="token operator">-&gt;</span>delayed_error<span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>delayed_error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 到这里说明 uv__tcp_connect 中没有出错，然后从内核获取三次握手的结果</span></span>
<span class="line">    <span class="token function">getsockopt</span><span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">               SOL_SOCKET<span class="token punctuation">,</span></span>
<span class="line">               SO_ERROR<span class="token punctuation">,</span></span>
<span class="line">               <span class="token operator">&amp;</span>error<span class="token punctuation">,</span></span>
<span class="line">               <span class="token operator">&amp;</span>errorsize<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    error <span class="token operator">=</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 还在连接中，则忽略，等待下次回调</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">==</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>EINPROGRESS<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  stream<span class="token operator">-&gt;</span>connect_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">uv__req_unregister</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 如果连接错误，或者没有数据等待写入则注销可写事件</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">uv__io_stop</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// 执行发起连接的回调</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>cb<span class="token punctuation">)</span></span>
<span class="line">    req<span class="token operator">-&gt;</span><span class="token function">cb</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 如果有数据等待发送，则执行写回调</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">uv__stream_flush_write_queue</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> UV_ECANCELED<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv__write_callbacks</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>发起连接的逻辑大致分为两种情况。第一种是调用 connect 时就失败了，这时候 Libuv 会把错误码记录到 delayed_error 中，往 pending 阶段插入一个任务，最后在 pending 阶段时执行上层回调把错误码告诉上层。第二种情况是成功发起了连接，在异步地等待连接结果，比如三次握手的结果，等到有结果后，就会在 Poll IO 阶段处理连接结果。这时候需要通过 getsockopt 从内核中拿到连接的结果，并把结果通过回调告诉上层。</p><p>除此之外，连接过程中 Libuv 允许写入数据，因为 Libuv 会缓存，等到连接成功后再执行写入，如果连接失败了 Libuv 会清除写事件并且执行写回调告诉上层。</p><h3 id="读取流中的数据" tabindex="-1"><a class="header-anchor" href="#读取流中的数据"><span>读取流中的数据</span></a></h3><p>当想从流中读取数据时，我们可以执行 uv_read_start。uv_read_start 会注册可读事件，这样流的数据（如果有的话）就会源源不断地流向调用方。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">uv_read_start</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">,</span></span>
<span class="line">                  uv_alloc_cb alloc_cb<span class="token punctuation">,</span></span>
<span class="line">                  uv_read_cb read_cb<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 标记正在读</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> UV_HANDLE_READING<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 保存回调，当有数据到来时，操作系统会通知 Libuv，然后 Libuv 最终执行这个回调通知上层</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>read_cb <span class="token operator">=</span> read_cb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置分配内存的函数，保存数据所需要的内存由上层负责管理</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>alloc_cb <span class="token operator">=</span> alloc_cb<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 注册读事件</span></span>
<span class="line">    <span class="token function">uv__io_start</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv__handle_start</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv_read_start 没有尝试发起读操作，而是记录读操作相关的回调，然后把流对应的文件描述符和感兴趣的事情注册到事件驱动模块中，当可读事件触发时，读回调就会被执行。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__read</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">uv_buf_t</span> buf<span class="token punctuation">;</span></span>
<span class="line">  <span class="token class-name">ssize_t</span> nread<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> count<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> is_ipc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 有数据时，会连续执行读操作，但是为了避免让其他事件也可以执行，所以不会一直执行读</span></span>
<span class="line">  count <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// is_ipc，用于 Unix 域，后续分析</span></span>
<span class="line">  is_ipc <span class="token operator">=</span> stream<span class="token operator">-&gt;</span>type <span class="token operator">==</span> UV_NAMED_PIPE <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uv_pipe_t</span><span class="token operator">*</span><span class="token punctuation">)</span> stream<span class="token punctuation">)</span><span class="token operator">-&gt;</span>ipc<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>read_cb</span>
<span class="line">      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_READING<span class="token punctuation">)</span></span>
<span class="line">      <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>count<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      </span>
<span class="line">    buf <span class="token operator">=</span> <span class="token function">uv_buf_init</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 分配内存，地址保存在 buf 中，alloc_cb 由上层实现</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span><span class="token function">alloc_cb</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uv_handle_t</span><span class="token operator">*</span><span class="token punctuation">)</span>stream<span class="token punctuation">,</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 单纯的数据读取</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>is_ipc<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">        nread <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>base<span class="token punctuation">,</span> buf<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">while</span> <span class="token punctuation">(</span>nread <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 传递了文件描述符，在讲 Unix 域时单独分析</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 读出错</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// </span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 读到底了</span></span>
<span class="line">      <span class="token function">uv__stream_eof</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 读成功</span></span>
<span class="line">      <span class="token class-name">ssize_t</span> buflen <span class="token operator">=</span> buf<span class="token punctuation">.</span>len<span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 执行上层回调</span></span>
<span class="line">      stream<span class="token operator">-&gt;</span><span class="token function">read_cb</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> nread<span class="token punctuation">,</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 读取的数据大小比buf的小，因为每次最多读 64 * 1024 字节</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>nread <span class="token operator">&lt;</span> buflen<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        stream<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> UV_HANDLE_READ_PARTIAL<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>读操作首先会调用 alloc_cb 分配 64 * 1024 字节的内存，然后调用 read 函数进行数据的读取，接着执行 read_cb 通知上层，如果读到的字节数是 0 则说明读对端关闭了写端，这时候执行 uv__stream_eof 进行处理。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__stream_eof</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uv_buf_t</span><span class="token operator">*</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 标记读完了</span></span>
<span class="line">  stream<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> UV_HANDLE_READ_EOF<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 撤销等待可读事件</span></span>
<span class="line">  <span class="token function">uv__io_stop</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 如果也没有注册等待可写事件，则停掉 handle</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">uv__io_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">uv__handle_stop</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">uv__stream_osx_interrupt_select</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 触发回调</span></span>
<span class="line">  stream<span class="token operator">-&gt;</span><span class="token function">read_cb</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> UV_EOF<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>UV_HANDLE_READING<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv__stream_eof 同样调用 read_cb 通知上层，并传入 UV_EOF 表示读结束了。有注册读操作，就会有停止读操作，对应的函数是 uv_read_stop。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">uv_read_stop</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 清除正在读取的标记</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>UV_HANDLE_READING<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 撤销等待读事件</span></span>
<span class="line">    <span class="token function">uv__io_stop</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLIN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 如果对写事件也不感兴趣，则停掉 handle，允许事件循环退出</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">uv__io_active</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">uv__handle_stop</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    stream<span class="token operator">-&gt;</span>read_cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>alloc_cb <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和 start 相反，start 是注册等待可读事件和打上正在读取这个标记，stop 则是撤销等待可读事件和清除这个标记。这些操作本质上是对事件驱动模块的操作。</p><h3 id="写入数据到流中" tabindex="-1"><a class="header-anchor" href="#写入数据到流中"><span>写入数据到流中</span></a></h3><p>我们可以通过 uv_write 往流中写入数据，但是数据不一定会被马上写入，而是会先缓存在流中，等待可写时，再把写入流对应的文件描述符中。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">uv_write</span><span class="token punctuation">(</span><span class="token class-name">uv_write_t</span><span class="token operator">*</span> req<span class="token punctuation">,</span> <span class="token comment">// 记录本次写请求的上下文</span></span>
<span class="line">             <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> handle<span class="token punctuation">,</span> <span class="token comment">// 往哪个流写</span></span>
<span class="line">             <span class="token keyword">const</span> <span class="token class-name">uv_buf_t</span> bufs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 需要写入的数据</span></span>
<span class="line">             <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nbufs<span class="token punctuation">,</span><span class="token comment">// buf个数</span></span>
<span class="line">             uv_write_cb cb <span class="token comment">// 写完后执行的回调</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">uv_write2</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> bufs<span class="token punctuation">,</span> nbufs<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv_write 直接调用 uv_write2。其中第四个参数是 NULL，代表写一般的数据，比如 hello 字符串，不传递文件描述符。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">int</span> <span class="token function">uv_write2</span><span class="token punctuation">(</span><span class="token class-name">uv_write_t</span><span class="token operator">*</span> req<span class="token punctuation">,</span></span>
<span class="line">              <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">,</span></span>
<span class="line">              <span class="token keyword">const</span> <span class="token class-name">uv_buf_t</span> bufs<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">              <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nbufs<span class="token punctuation">,</span></span>
<span class="line">              <span class="token comment">// 需要传递的文件描述符所在的流，这里是 NULL</span></span>
<span class="line">              <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> send_handle<span class="token punctuation">,</span></span>
<span class="line">              uv_write_cb cb</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">int</span> empty_queue<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// write_queue_size 为 0 代表当前没有等待写入的数据，则可以尝试直接写入</span></span>
<span class="line">        empty_queue <span class="token operator">=</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>write_queue_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 初始化一个写请求</span></span>
<span class="line">        <span class="token function">uv__req_init</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> req<span class="token punctuation">,</span> UV_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 写完后执行的回调</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 记录所操作的流</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> stream<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 操作错误码</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>error <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">QUEUE_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 存储数据元信息的 bufs</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>bufs <span class="token operator">=</span> req<span class="token operator">-&gt;</span>bufsml<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 不够则扩容</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nbufs <span class="token operator">&gt;</span> <span class="token function">ARRAY_SIZE</span><span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>bufsml<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            req<span class="token operator">-&gt;</span>bufs <span class="token operator">=</span> <span class="token function">uv__malloc</span><span class="token punctuation">(</span>nbufs <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bufs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 把需要写入的数据填充到 req-&gt;bufs 中</span></span>
<span class="line">        <span class="token function">memcpy</span><span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>bufs<span class="token punctuation">,</span> bufs<span class="token punctuation">,</span> nbufs <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bufs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 需要写入的 buf 个数</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>nbufs <span class="token operator">=</span> nbufs<span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 目前写入的 buf 个数，初始化是 0</span></span>
<span class="line">        req<span class="token operator">-&gt;</span>write_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 更新流中待写数据的总长度，就是每个 buf 的数据大小加起来</span></span>
<span class="line">        stream<span class="token operator">-&gt;</span>write_queue_size <span class="token operator">+=</span> <span class="token function">uv__count_bufs</span><span class="token punctuation">(</span>bufs<span class="token punctuation">,</span> nbufs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 插入待写队列</span></span>
<span class="line">        <span class="token function">QUEUE_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">/*</span>
<span class="line">            stream-&gt;connect_req 非空说明流作为客户端，并且正在建立连接，</span>
<span class="line">            则不能执行写入，建立连接成功会置 connect_req 为 NULL 并触发可写事件。</span>
<span class="line">        */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>connect_req<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/* Still connecting, do nothing. */</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//  待写数据队列为空，说明没有数据等待写入，则这次的写操作可以直接发起</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>empty_queue<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">uv__write</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">/*</span>
<span class="line">                队列非空，说明还有数据等待被写入，先注册等待可写事件，</span>
<span class="line">                事件触发的时候，再执行写入</span>
<span class="line">            */</span></span>
<span class="line">            <span class="token function">uv__io_start</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv_write2 首先封装一个写请求并插入到流的待写队列，然后根据当前流状态进行下一步操作。</p><p>如果正在发起连接，则不需要执行写操作，因为连接成功后会触发可写事件。 如果待写队列为空，则直接进行写操作，因为文件描述符是非阻塞的，所以就算写失败了也不会阻塞进程， 如果队列非空则注册可写事件，等待可写时再写入。</p><p>从上图中可以看到，Libuv 只是保存了指向待写数据的指针，而不是进行数据的复制。数据所占内存的管理由调用方管理，如果数据保存在堆内存，则需要在写回调中释放对应的内存。如下是当可写事件触发时，真正的写操作逻辑。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__write</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">iovec</span><span class="token operator">*</span> iov<span class="token punctuation">;</span></span>
<span class="line">    QUEUE<span class="token operator">*</span> q<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uv_write_t</span><span class="token operator">*</span> req<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> iovmax<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> iovcnt<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">ssize_t</span> n<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">start<span class="token operator">:</span></span>
<span class="line">    <span class="token comment">// 待写队列为空，没数据需要写</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 取出一个写请求</span></span>
<span class="line">    q <span class="token operator">=</span> <span class="token function">QUEUE_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    req <span class="token operator">=</span> <span class="token function">QUEUE_DATA</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token class-name">uv_write_t</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">        struct iovec {</span>
<span class="line">            ptr_t iov_base; // 数据首地址</span>
<span class="line">            size_t iov_len; // 数据长度</span>
<span class="line">        };</span>
<span class="line">        iovec 和 bufs 结构体的定义一样</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">        req-&gt;write_index 表示当前待写 buf 的索引，</span>
<span class="line">        一个请求里可以有多个 buf，转成 iovec 格式发送</span>
<span class="line">    */</span></span>
<span class="line">    iov <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">iovec</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>bufs<span class="token punctuation">[</span>req<span class="token operator">-&gt;</span>write_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 待写的 buf 个数，nbufs 是总数，write_index 是当前已写的个数</span></span>
<span class="line">    iovcnt <span class="token operator">=</span> req<span class="token operator">-&gt;</span>nbufs <span class="token operator">-</span> req<span class="token operator">-&gt;</span>write_index<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 最多能写几个</span></span>
<span class="line">    iovmax <span class="token operator">=</span> <span class="token function">uv__getiovmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 取最小值</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>iovcnt <span class="token operator">&gt;</span> iovmax<span class="token punctuation">)</span></span>
<span class="line">        iovcnt <span class="token operator">=</span> iovmax<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 需要传递的描述符</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>send_handle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 需要传递文件描述符的逻辑，分析 Unix 域的时候再分析</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 单纯发送数据，则直接写</span></span>
<span class="line">        <span class="token keyword">do</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>iovcnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                n <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span> iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_base<span class="token punctuation">,</span> iov<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>iov_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                n <span class="token operator">=</span> <span class="token function">writev</span><span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span> iov<span class="token punctuation">,</span> iovcnt<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 写失败</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 发送失败的逻辑，我们不具体分析</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 写成功，n 是写成功的字节数</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 当前 buf</span></span>
<span class="line">            <span class="token class-name">uv_buf_t</span><span class="token operator">*</span> buf <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>bufs<span class="token punctuation">[</span>req<span class="token operator">-&gt;</span>write_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// buf 的数据长度</span></span>
<span class="line">            <span class="token class-name">size_t</span> len <span class="token operator">=</span> buf<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">/*</span>
<span class="line">                len 代表需要写入的，n 表示已经写入的</span>
<span class="line">                len 如果大于 n 说明该 buf 的数据还没有完全被写入</span>
<span class="line">            */</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>n <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 更新指针，指向下次待发送的数据首地址</span></span>
<span class="line">                buf<span class="token operator">-&gt;</span>base <span class="token operator">+=</span> n<span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 记录 buf 中还有多少数据等待发送</span></span>
<span class="line">                buf<span class="token operator">-&gt;</span>len <span class="token operator">-=</span> n<span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 更新待写数据的总长度</span></span>
<span class="line">                stream<span class="token operator">-&gt;</span>write_queue_size <span class="token operator">-=</span> n<span class="token punctuation">;</span></span>
<span class="line">                n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 设置了一直写标记，则跳到 start 标签继续写</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_BLOCKING_WRITES<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">goto</span> start<span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 否则等待可写事件触发的时候再写</span></span>
<span class="line">                    <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// n &gt;= len 说明成功写入了一个或多个 buf 的数据</span></span>
<span class="line">                <span class="token comment">// 该 buf 的数据全部写入成功，更新索引到下一个 buf 的位置</span></span>
<span class="line">                req<span class="token operator">-&gt;</span>write_index<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">                n <span class="token operator">-=</span> len<span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 更新待写数据总长度</span></span>
<span class="line">                stream<span class="token operator">-&gt;</span>write_queue_size <span class="token operator">-=</span> len<span class="token punctuation">;</span></span>
<span class="line">                <span class="token comment">// 是否全部数据都写入完毕</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>write_index <span class="token operator">==</span> req<span class="token operator">-&gt;</span>nbufs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 写完了本请求的数据，做后续处理</span></span>
<span class="line">                    <span class="token function">uv__write_req_finish</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 到这说明数据还没有完全被写入，保证注册了等待可写事件，等待继续写</span></span>
<span class="line">    <span class="token function">uv__io_start</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写完一个请求的数据后 Libuv 是如何处理的呢？从上面的代码中可以看到，写完一个请求的数据后，会调用 uv__write_req_finish 函数。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 把 buf 的数据写入完成或写出错后触发回调</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__write_req_finish</span><span class="token punctuation">(</span><span class="token class-name">uv_write_t</span><span class="token operator">*</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream <span class="token operator">=</span> req<span class="token operator">-&gt;</span>handle<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 移出队列</span></span>
<span class="line">    <span class="token function">QUEUE_REMOVE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 插入写完成队列</span></span>
<span class="line">    <span class="token function">QUEUE_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_completed_queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token operator">-&gt;</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 插入 pending 队列，在 pending 阶段执行业务回调</span></span>
<span class="line">    <span class="token function">uv__io_feed</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">uv__io_feed</span><span class="token punctuation">(</span><span class="token class-name">uv_loop_t</span><span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token class-name">uv__io_t</span><span class="token operator">*</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>w<span class="token operator">-&gt;</span>pending_queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">QUEUE_INSERT_TAIL</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>loop<span class="token operator">-&gt;</span>pending_queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>w<span class="token operator">-&gt;</span>pending_queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv__write_req_finish 的逻辑比较简单，就是把节点从待写队列中移除，然后插入写完成队列，结构如下图所示。</p><p>最后把 IO 观察者插入 pending 队列。在 pending 阶段会执行 IO 观察者的回调 uv__stream_io。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__stream_io</span><span class="token punctuation">(</span><span class="token class-name">uv_loop_t</span><span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token class-name">uv__io_t</span><span class="token operator">*</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  stream <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token class-name">uv_stream_t</span><span class="token punctuation">,</span> io_watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>POLLOUT <span class="token operator">|</span> POLLERR <span class="token operator">|</span> POLLHUP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果有数据等话，继续写，如果写完了就返回 </span></span>
<span class="line">    <span class="token function">uv__write</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 执行业务回调</span></span>
<span class="line">    <span class="token function">uv__write_callbacks</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv__stream_io 中首先执行 uv__write 判断是否还有数据需要写，有就继续写，没有就直接返回，然后通过 uv__write_callbacks 执行业务回调。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__write_callbacks</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">uv_write_t</span><span class="token operator">*</span> req<span class="token punctuation">;</span></span>
<span class="line">  QUEUE<span class="token operator">*</span> q<span class="token punctuation">;</span></span>
<span class="line">  QUEUE pq<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 写完成队列为空，不需要处理</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_completed_queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">QUEUE_MOVE</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_completed_queue<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 清空写完成队列，并执行业务回调</span></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pq<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    q <span class="token operator">=</span> <span class="token function">QUEUE_HEAD</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    req <span class="token operator">=</span> <span class="token function">QUEUE_DATA</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token class-name">uv_write_t</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">QUEUE_REMOVE</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 请求结束，请求个数减一</span></span>
<span class="line">    <span class="token function">uv__req_unregister</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 执行上层回调</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>cb<span class="token punctuation">)</span></span>
<span class="line">      req<span class="token operator">-&gt;</span><span class="token function">cb</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> req<span class="token operator">-&gt;</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="关闭流的写端" tabindex="-1"><a class="header-anchor" href="#关闭流的写端"><span>关闭流的写端</span></a></h3><p>面向连接的流是全双工的，每一端都可以同时进行数据的读写，所以关闭时，某一端可以选择关闭读或者写。Libuv 没有关闭读端的功能，我们可以通过关闭流或者不订阅可读事件来实现，想要关闭写端，可以通过 uv_shutdown 函数来操作</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 关闭流的写端</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">uv_shutdown</span><span class="token punctuation">(</span><span class="token class-name">uv_shutdown_t</span><span class="token operator">*</span> req<span class="token punctuation">,</span> <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">,</span> uv_shutdown_cb cb<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">uv__req_init</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> req<span class="token punctuation">,</span> UV_SHUTDOWN<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>handle <span class="token operator">=</span> stream<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 关闭操作完成后执行的上层回调</span></span>
<span class="line">    req<span class="token operator">-&gt;</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>shutdown_req <span class="token operator">=</span> req<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 设置正在操作的标记</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> UV_HANDLE_SHUTTING<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 注册可写事件</span></span>
<span class="line">    <span class="token function">uv__io_start</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv_shutdown 只是把请求上下文保存到 stream 中，接着注册可写事件，等到可写事件触发时 Libuv 会执行 uv__stream_io 关闭流的写端。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__stream_io</span><span class="token punctuation">(</span><span class="token class-name">uv_loop_t</span><span class="token operator">*</span> loop<span class="token punctuation">,</span> <span class="token class-name">uv__io_t</span><span class="token operator">*</span> w<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> events<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  stream <span class="token operator">=</span> <span class="token function">container_of</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token class-name">uv_stream_t</span><span class="token punctuation">,</span> io_watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 可写事件触发</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>events <span class="token operator">&amp;</span> <span class="token punctuation">(</span>POLLOUT <span class="token operator">|</span> POLLERR <span class="token operator">|</span> POLLHUP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">uv__write</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv__write_callbacks</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 待写队列为空才关闭流</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">QUEUE_EMPTY</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>write_queue<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">uv__drain</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，如果流中还有数据则不能关闭流，需要等到数据写入完毕，当写入完毕后，执行 uv__drain 关闭。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__drain</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token class-name">uv_shutdown_t</span><span class="token operator">*</span> req<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">int</span> err<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token comment">// 撤销等待可写事件，因为没有数据需要写入了</span></span>
<span class="line">  <span class="token function">uv__io_stop</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stream<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">,</span> POLLOUT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 流还没有关闭并且设置了关闭标记，则关闭写端</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_SHUTTING<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">      <span class="token operator">!</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_CLOSING<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">      <span class="token operator">!</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;</span> UV_HANDLE_SHUT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    req <span class="token operator">=</span> stream<span class="token operator">-&gt;</span>shutdown_req<span class="token punctuation">;</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>shutdown_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 清除标记</span></span>
<span class="line">    stream<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>UV_HANDLE_SHUTTING<span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv__req_unregister</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    err <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 关闭写端</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token function">uv__stream_fd</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">,</span> SHUT_WR<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      err <span class="token operator">=</span> <span class="token function">UV__ERR</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 标记已关闭写端</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">      stream<span class="token operator">-&gt;</span>flags <span class="token operator">|=</span> UV_HANDLE_SHUT<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 执行回调</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token operator">-&gt;</span>cb <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></span>
<span class="line">      req<span class="token operator">-&gt;</span><span class="token function">cb</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终调用系统函数 shutdown 关闭流的写端，但是读端还没有关闭，还可以读数据 。</p><h3 id="关闭流" tabindex="-1"><a class="header-anchor" href="#关闭流"><span>关闭流</span></a></h3><p>当我们不再使用一个流的时候，可以通过 uv_close 关闭它，uv_close 最终会执行 uv__stream_close 关闭流。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">uv__stream_close</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">uv__stream_queued_fds_t</span><span class="token operator">*</span> queued_fds<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 关闭 IO 观察者，对 fd 的事件不再感兴趣</span></span>
<span class="line">    <span class="token function">uv__io_close</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> <span class="token operator">&amp;</span>handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">uv_read_stop</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 关闭 handle</span></span>
<span class="line">    <span class="token function">uv__handle_stop</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 不再读写</span></span>
<span class="line">    handle<span class="token operator">-&gt;</span>flags <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>UV_HANDLE_READABLE <span class="token operator">|</span> UV_HANDLE_WRITABLE<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 关闭文件描述符，除了标准输入，输出，错误流</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">.</span>fd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">/* Don&#39;t close stdio file descriptors. Nothing good comes from it. */</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">.</span>fd <span class="token operator">&gt;</span> STDERR_FILENO<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment">// 关闭文件描述符</span></span>
<span class="line">            <span class="token function">uv__close</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">.</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            handle<span class="token operator">-&gt;</span>io_watcher<span class="token punctuation">.</span>fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">// 关闭已经接收但是还没有处理的 fd，比如 TCP 连接</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>accepted_fd <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">uv__close</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>accepted_fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        handle<span class="token operator">-&gt;</span>accepted_fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 关闭传递过来但还没有被处理的 fd，用于 Unix 域 IPC 时</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>queued_fds <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        queued_fds <span class="token operator">=</span> handle<span class="token operator">-&gt;</span>queued_fds<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> queued_fds<span class="token operator">-&gt;</span>offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">uv__close</span><span class="token punctuation">(</span>queued_fds<span class="token operator">-&gt;</span>fds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">uv__free</span><span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>queued_fds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        handle<span class="token operator">-&gt;</span>queued_fds <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关闭流就是清除流中的状态和资源，不同类型的流对应不同的操作，比如 Unix 域用于 IPC 时才有 handle-&gt;queued_fds。关闭了流之后，在 close 阶段时会销毁流。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 执行 close 阶段的回调</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">uv__finish_close</span><span class="token punctuation">(</span><span class="token class-name">uv_handle_t</span><span class="token operator">*</span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>handle<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line">    <span class="token keyword">case</span> UV_NAMED_PIPE<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> UV_TCP<span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> UV_TTY<span class="token operator">:</span></span>
<span class="line">      <span class="token function">uv__stream_destroy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span><span class="token punctuation">)</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>销毁流的函数是 uv__stream_destroy。</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">uv__stream_destroy</span><span class="token punctuation">(</span><span class="token class-name">uv_stream_t</span><span class="token operator">*</span> stream<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 正在发起连接则执行回调</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>connect_req<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 销毁一个request</span></span>
<span class="line">        <span class="token function">uv__req_unregister</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> stream<span class="token operator">-&gt;</span>connect_req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 执行上层回调</span></span>
<span class="line">        stream<span class="token operator">-&gt;</span>connect_req<span class="token operator">-&gt;</span><span class="token function">cb</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>connect_req<span class="token punctuation">,</span> UV_ECANCELED<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        stream<span class="token operator">-&gt;</span>connect_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 清空待写队列</span></span>
<span class="line">      <span class="token function">uv__stream_flush_write_queue</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> UV_ECANCELED<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 执行写回调</span></span>
<span class="line">      <span class="token function">uv__write_callbacks</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token comment">// 正在发起关闭写端操作则执行回调</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>shutdown_req<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">uv__req_unregister</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>loop<span class="token punctuation">,</span> stream<span class="token operator">-&gt;</span>shutdown_req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 调用回调</span></span>
<span class="line">        stream<span class="token operator">-&gt;</span>shutdown_req<span class="token operator">-&gt;</span><span class="token function">cb</span><span class="token punctuation">(</span>stream<span class="token operator">-&gt;</span>shutdown_req<span class="token punctuation">,</span> UV_ECANCELED<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        stream<span class="token operator">-&gt;</span>shutdown_req <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>uv__stream_destroy 一共三个逻辑，分别是对发起连接、关闭写端和写入数据的处理，具体的处理就是执行上层的回调。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>本节课介绍了 Libuv 流的概念、工作机制以及围绕着流的各种操作的实现。流本质是对文件描述符的封装，依赖事件驱动模块进行工作，当我们操作一个文件描述符时，通常不是直接发起操作，而是注册相关的事件，等待事件完成后，事件驱动就会通知 Libuv，接着再发起真正的操作，比如数据读写。了解这些之后，我们再学习后面的 TCP、Unix 域的时候就会轻松很多，因为它们都是基于流机制进行工作的。</p>`,66)]))}const i=s(t,[["render",c],["__file","stream.html.vue"]]),u=JSON.parse('{"path":"/nodejs/deep_into_nodejs/libuv/stream.html","title":"libuv 的流机制","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"流是什么？","slug":"流是什么","link":"#流是什么","children":[{"level":3,"title":"初始化流","slug":"初始化流","link":"#初始化流","children":[]},{"level":3,"title":"对流发起一个连接","slug":"对流发起一个连接","link":"#对流发起一个连接","children":[]},{"level":3,"title":"读取流中的数据","slug":"读取流中的数据","link":"#读取流中的数据","children":[]},{"level":3,"title":"写入数据到流中","slug":"写入数据到流中","link":"#写入数据到流中","children":[]},{"level":3,"title":"关闭流的写端","slug":"关闭流的写端","link":"#关闭流的写端","children":[]},{"level":3,"title":"关闭流","slug":"关闭流","link":"#关闭流","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]}],"git":{"updatedTime":1705375577000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"nodejs/deep_into_nodejs/libuv/stream.md"}');export{i as comp,u as data};
