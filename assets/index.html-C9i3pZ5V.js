import{_ as n,c as s,f as a,o as l}from"./app-LHpjaFTr.js";const i={};function c(o,e){return l(),s("div",null,e[0]||(e[0]=[a(`<h1 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法"><span>基础语法</span></a></h1><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token comment"># 注释以#开头。变量直接赋值，无需类型声明。</span></span>
<span class="line">x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Please enter an integer: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。必须包含相同的缩进空白数量，不然会报\`IndentationError\`错误。</span></span>
<span class="line"><span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    x <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Negative changed to zero&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Zero&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Single&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;More&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment"># 多个变量同时赋值</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h2><ul><li>Numeric Types 数字类型 <ul><li><code>int</code>（有符号整型） <ul><li>Python2.X 版本中，在 2.2 以后的版本中还有<code>long</code> 类型。在 Python3.X 版本中 <code>long</code> 类型被移除，使用 <code>int</code> 替代。</li></ul></li><li><code>float</code>（浮点型）</li><li><code>complex</code>（复数）</li></ul></li><li>Text Sequence Type 文本序列类型（字符串） <ul><li><code>str</code></li></ul></li><li>布尔 <code>bool</code><ul><li><code>True</code> 、<code>False</code> 注意是大写开头</li></ul></li><li>The Null Object <code>NoneType</code><ul><li><code>None</code></li></ul></li><li>Sequence Types 序列类型 <ul><li><code>list</code></li><li><code>tuple</code></li><li><code>range</code></li></ul></li><li>Set Types集合类型 <ul><li><code>set</code>,</li><li><code>frozenset</code></li></ul></li><li>Mapping Types 映射类型 <ul><li><code>dict</code></li></ul></li><li>Binary Sequence Types 二进制序列类型 <ul><li><code>bytes</code></li><li><code>bytearray</code></li><li><code>memoryview</code></li></ul></li><li><a href="https://docs.python.org/zh-cn/3.11/library/stdtypes.html" target="_blank" rel="noopener noreferrer">...</a></li></ul><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h2><h3 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h3><ul><li><code>+</code> 加</li><li><code>-</code> 减</li><li><code>*</code> 乘</li><li><code>/</code> 除</li><li><code>//</code> 整除</li><li><code>**</code> 幂 - 返回x的y次幂</li><li><code>%</code> 取模 - 返回除法的余数</li><li><code>@</code> 矩阵乘</li></ul><h3 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h3><ul><li><code>&lt;&lt;</code> 左移</li><li><code>&gt;&gt;</code> 右移</li><li><code>&amp;</code> 按位与</li><li><code>|</code> 按位或</li><li><code>^ </code> 按位异或</li><li><code>~</code> 按位取反运算</li></ul><h3 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符"><span>赋值运算符</span></a></h3><ul><li><code>:=</code><ul><li><code>+=</code></li><li><code>-=</code></li><li><code>*=</code></li><li><code>/=</code></li><li><code>%=</code></li><li><code>**=</code></li><li><code>//=</code></li></ul></li></ul><h3 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h3><ul><li><code>&lt;</code> 小于</li><li><code>&gt;</code> 大于</li><li><code>&lt;=</code> 小于等于</li><li><code>&gt;=</code> 大于等于</li><li><code>==</code> 等于</li><li><code>!=</code> 不等于</li></ul><h3 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h3><ul><li><code>and</code></li><li><code>or</code></li><li><code>not</code></li></ul><h3 id="成员运算符-成员检测" tabindex="-1"><a class="header-anchor" href="#成员运算符-成员检测"><span>成员运算符(成员检测)</span></a></h3><ul><li><code>in</code></li><li><code>not in</code></li></ul><h3 id="身份运算符" tabindex="-1"><a class="header-anchor" href="#身份运算符"><span>身份运算符</span></a></h3><ul><li><code>is</code> 判断两个标识符是不是引用自一个对象</li><li><code>is not</code>判断两个标识符是不是引用自不同对象</li></ul><h2 id="语法描述格式" tabindex="-1"><a class="header-anchor" href="#语法描述格式"><span>语法描述格式</span></a></h2><p>采用经过改进的 BNF (巴科斯范式)语法标注。样式如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">name      ::=  lc_letter (lc_letter | &quot;_&quot;)*</span>
<span class="line">lc_letter ::=  &quot;a&quot;...&quot;z&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上标注的解释：第一行表示 <code>name</code> 是 <code>lc_letter</code> 之后跟零个或多个 <code>lc_letter</code> 和下划线。而 <code>lc_letter</code> 则是任意单个 <code>&#39;a&#39;</code> 至 <code>&#39;z&#39;</code>字符。</p><p>标注格式的解释：每条规则的开头是一个名称 (即该规则所定义的名称) 加上 <code>::=</code>。 竖线 (<code>|</code>) 被用来分隔可选项，它是此标注中绑定程度最低的操作符。 星号 (<code>*</code>) 表示前一项的零次或多次重复，类似地，加号 (<code>+</code>) 表示一次或多次重复，而由方括号括起的内容 (<code>[ ]</code>) 表示出现零次或一次 (或者说，这部分内容是可选的)。 <code>*</code> 和 <code>+</code> 操作符的绑定是最紧密的，圆括号用于分组。 字符串字面值包含在引号内。 空格的作用仅限于分隔形符。 每条规则通常为一行，有许多个可选项的规则可能会以竖线为界分为多行。</p><p>在词法定义中 (如上述示例)，还额外使用了两个约定: 由三个点号分隔的两个字符字面值表示在指定 (闭) 区间范围内的任意单个 ASCII 字符。由尖括号 (<code>&lt;...&gt;</code>) 括起来的内容是对于所定义符号的非正式描述；即可以在必要时用来说明 &#39;控制字符&#39; 的意图。</p><p>词法定义和句法定义都是采用此格式，区别在: 词法（lexical）定义作用于源代码中单独的字符，而句法（syntactic）定义则作用于由词法分析所生成的token流。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://docs.python.org/" target="_blank" rel="noopener noreferrer">官方文档</a></li></ul>`,28)]))}const d=n(i,[["render",c],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/pl/python/","title":"基础语法","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":2,"title":"运算符","slug":"运算符","link":"#运算符","children":[{"level":3,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":3,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":3,"title":"赋值运算符","slug":"赋值运算符","link":"#赋值运算符","children":[]},{"level":3,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":3,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":3,"title":"成员运算符(成员检测)","slug":"成员运算符-成员检测","link":"#成员运算符-成员检测","children":[]},{"level":3,"title":"身份运算符","slug":"身份运算符","link":"#身份运算符","children":[]}]},{"level":2,"title":"语法描述格式","slug":"语法描述格式","link":"#语法描述格式","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1674022245000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":4,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/python/index.md"}');export{d as comp,p as data};
