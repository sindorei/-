import{_ as l,c as a,f as i,o as s}from"./app-LHpjaFTr.js";const n={};function o(c,e){return s(),a("div",null,e[0]||(e[0]=[i(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h1><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><ul><li><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code></li><li>不同数据类型不能进行运算</li><li><code>isMultiple(of:)</code>方法可用来判断是否能整除</li></ul><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> number <span class="token operator">=</span> <span class="token number">123</span></span>
<span class="line"><span class="token keyword">let</span> isMultiple <span class="token operator">=</span> number<span class="token punctuation">.</span><span class="token function">isMultiple</span><span class="token punctuation">(</span>of<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组合复制运算符" tabindex="-1"><a class="header-anchor" href="#组合复制运算符"><span>组合复制运算符</span></a></h2><ul><li><code>+=</code></li><li><code>-=</code></li><li>swift 不支持 <code>++</code>和<code>--</code></li></ul><h2 id="比较运算符" tabindex="-1"><a class="header-anchor" href="#比较运算符"><span>比较运算符</span></a></h2><ul><li><code>==</code></li><li><code>!=</code></li><li><code>&gt;</code></li><li><code>&lt;</code></li><li><code>&gt;=</code></li><li><code>&lt;=</code></li><li><code>===</code> 恒等，用来判断2个对象是否是同一个实例</li><li><code>!==</code>不恒等</li></ul><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><ul><li><code>!</code></li><li><code>&amp;&amp;</code></li><li><code>||</code></li></ul><h2 id="三元运算符" tabindex="-1"><a class="header-anchor" href="#三元运算符"><span>三元运算符</span></a></h2><ul><li><code>? :</code></li></ul><h2 id="区间操作符" tabindex="-1"><a class="header-anchor" href="#区间操作符"><span>区间操作符</span></a></h2><ul><li><code>..&lt;</code> 半开区间，不包含最后的值</li><li><code>...</code> 闭区间，第一个和最后一个都包含</li></ul>`,14)]))}const d=l(n,[["render",o],["__file","operator.html.vue"]]),r=JSON.parse('{"path":"/pl/swift/operator.html","title":"运算符","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"组合复制运算符","slug":"组合复制运算符","link":"#组合复制运算符","children":[]},{"level":2,"title":"比较运算符","slug":"比较运算符","link":"#比较运算符","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":2,"title":"三元运算符","slug":"三元运算符","link":"#三元运算符","children":[]},{"level":2,"title":"区间操作符","slug":"区间操作符","link":"#区间操作符","children":[]}],"git":{"updatedTime":1669361850000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/swift/operator.md"}');export{d as comp,r as data};
