import{_ as s,c as a,f as e,o as l}from"./app-LHpjaFTr.js";const t={};function p(i,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型"><span>数据类型</span></a></h1><p>可以使用<code>type</code>函数测试给定变量或者字面量的类型</p><h2 id="_8中基本类型" tabindex="-1"><a class="header-anchor" href="#_8中基本类型"><span>8中基本类型</span></a></h2><ul><li><code>nil</code><ul><li>只有值<code>nil</code>属于该类型，表示一个无效值（在条件表达式中相当于false）</li></ul></li><li><code>boolean</code><ul><li>包含两个值：<code>false</code>和<code>true</code>。</li><li>Lua 把 <code>false</code> 和 <code>nil</code> 看作是 <code>false</code>，其他的都为 <code>true</code>，数字 <code>0</code> 也是 <code>true</code></li></ul></li><li><code>number</code><ul><li>64-bit integers and double-precision (64-bit) floats, but you can also compile Lua so that it uses 32-bit integers and/or single-precision (32-bit) floats.</li></ul></li><li><code>string</code><ul><li>字符串由一对双引号或单引号来表示</li><li>也可以用 2 个方括号 <code>[[]]</code>来表示&quot;一块&quot;字符串</li><li>使用 <code>#</code> 来计算字符串的长度</li><li>使用<code>..</code>进行字符串连接</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line">html <span class="token operator">=</span> <span class="token string">[[</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line">]]</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">str <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span>str<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token operator">#</span><span class="token string">&#39;World!&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>function</code></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">then</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">end</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">factorial</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>table</code><ul><li>其实是一个&quot;关联数组&quot;（associative arrays），数组的索引可以是数字、字符串或表类型。通过&quot;构造表达式&quot;来创建，最简单构造表达式是<code>{}</code>，用来创建一个空表。</li></ul></li></ul><div class="language-lua line-numbers-mode" data-highlighter="prismjs" data-ext="lua" data-title="lua"><pre><code><span class="line"><span class="token keyword">local</span> tbl <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pear&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;grape&quot;</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">local</span> table1 <span class="token operator">=</span> <span class="token punctuation">{</span>key1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> key2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> key3 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span> k <span class="token punctuation">,</span>v <span class="token keyword">in</span> <span class="token function">pairs</span><span class="token punctuation">(</span>table1<span class="token punctuation">)</span> <span class="token keyword">do</span></span>
<span class="line">	<span class="token function">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">end</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>userdata</code><ul><li>一种用户自定义数据，用于表示一种由应用程序或 C/C++ 语言库所创建的类型，可以将任意 C/C++ 的任意数据类型的数据（通常是 struct 和 指针）存储到 Lua 变量中调用。</li></ul></li><li><code>thread</code><ul><li>表示执行的独立线路，用于执行协同程序</li></ul></li></ul>`,10)]))}const c=s(t,[["render",p],["__file","types.html.vue"]]),u=JSON.parse('{"path":"/pl/lua/types.html","title":"数据类型","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"8中基本类型","slug":"_8中基本类型","link":"#_8中基本类型","children":[]}],"git":{"updatedTime":1674022245000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/lua/types.md"}');export{c as comp,u as data};
