import{_ as s,c as a,f as t,o as e}from"./app-LHpjaFTr.js";const l={};function p(i,n){return e(),a("div",null,n[0]||(n[0]=[t(`<h1 id="控制流" tabindex="-1"><a class="header-anchor" href="#控制流"><span>控制流</span></a></h1><h2 id="条件语句" tabindex="-1"><a class="header-anchor" href="#条件语句"><span>条件语句</span></a></h2><ul><li><code>if</code>、<code>elseif</code>、<code>else</code></li><li><code>switch</code><ul><li>不存在隐式的贯穿，即不需要再每个<code>case</code>的最后加上<code>break</code></li><li>可使用<code>fallthrough</code>关键字进行显示贯穿</li><li><code>case</code> 分支可区间匹配</li></ul></li></ul><h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环"><span>循环</span></a></h2><h3 id="for-in-循环" tabindex="-1"><a class="header-anchor" href="#for-in-循环"><span>for-in 循环</span></a></h3><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// 遍历数组</span></span>
<span class="line"><span class="token keyword">let</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;Anna&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Alex&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Brian&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;Jack&quot;</span></span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> name <span class="token keyword">in</span> names <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Hello, </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">name</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 遍历字典</span></span>
<span class="line"><span class="token keyword">let</span> numberOfLegs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;spider&quot;</span></span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;ant&quot;</span></span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">&quot;cat&quot;</span></span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span>animalName<span class="token punctuation">,</span> legCount<span class="token punctuation">)</span> <span class="token keyword">in</span> numberOfLegs <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">animalName</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">s have </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">legCount</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> legs&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 遍历区间</span></span>
<span class="line"><span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">...</span><span class="token number">5</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> times 5 is </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">index <span class="token operator">*</span> <span class="token number">5</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环"><span>while 循环</span></a></h3><ul><li>while 循环，每次在循环开始时计算条件是否符合</li><li>repeat-while 循环，每次在循环结束时计算条件是否符合(类似其他语言的do while)</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">while condition {</span>
<span class="line">    statements</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">repeat {</span>
<span class="line">    statements</span>
<span class="line">} while condition</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const c=s(l,[["render",p],["__file","control_flow.html.vue"]]),u=JSON.parse('{"path":"/pl/swift/control_flow.html","title":"控制流","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"条件语句","slug":"条件语句","link":"#条件语句","children":[]},{"level":2,"title":"循环","slug":"循环","link":"#循环","children":[{"level":3,"title":"for-in 循环","slug":"for-in-循环","link":"#for-in-循环","children":[]},{"level":3,"title":"while 循环","slug":"while-循环","link":"#while-循环","children":[]}]}],"git":{"updatedTime":1669361850000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/swift/control_flow.md"}');export{c as comp,u as data};
