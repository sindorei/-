import{_ as e,c as i,f as a,o as n}from"./app-LHpjaFTr.js";const t={};function s(d,l){return n(),i("div",null,l[0]||(l[0]=[a(`<h1 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h1><h2 id="指令文档" tabindex="-1"><a class="header-anchor" href="#指令文档"><span>指令文档</span></a></h2><ul><li>https://docs.docker.com/engine/reference/builder/</li></ul><h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令"><span>常用指令</span></a></h2><ul><li>FROM 指定父镜像</li><li>MAINTAINER 作者信息</li><li>LABEL 标签</li><li>RUN 执行命令</li><li>CMD 容器启动命令 <ul><li>可被<code>docker run</code> 传入的命令覆盖</li><li>只能有一个该指令，多个只有最后一个生效</li></ul></li><li>ENTRYPOINT 入口 <ul><li>容器启动后执行</li><li>如果docker run 没传参命令，启动后执行的是ENTRYPOINT + CMD</li></ul></li><li>ADD build时添加文件到镜像，不局限当前build上下文，还可以是远程文件，还可解压压缩包</li><li>ENV 环境变量，容器启动时-e 可覆盖</li><li>ARG <ul><li>构建参数，相同名字的ENV会覆盖ARG的参数</li><li><code>docker build --build-arg</code> 可传入</li></ul></li><li>EXPOSE 暴露端口 <ul><li>指定使用这个镜像启动的容器可以通过哪个端口和外界进行通信</li></ul></li><li>WORKDIR 工作目录 <ul><li>容器启动时的默认目录</li></ul></li><li>COPY <ul><li>COPY 指令用于将文件或目录拷贝到镜像中指定的位置</li><li><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</code></li><li>「源路径」可以有多个，空格分隔。相对于构建上下文路径。构建上下文目录以外的路径是不被允许的。绝对路径也是相对于构建上下文目录的。</li><li>「目的路径」是绝对路径或者是相对于<code>WORKDIR</code>的相对路径</li></ul></li><li>VOLUME <ul><li>指定用于指定容器数据的挂载点</li><li>容器在运行时会产生各种数据，由于容器和宿主机天然是隔离的，所以在宿主机上并不能看到容器内的数据，当容器被销毁时，这些数据也会随之销毁，无法找回。为了将容器内产生的数据存放到宿主机上，我们可以在制作镜像时指定某些目录为挂载点，然后将容器运行时产生的数据指定输出到这些目录中。当容器启动时，Docker 就会自动在宿主机上创建数据卷来映射挂载点，这样容器中产生的数据就会保存在宿主机上的这个数据卷内。数据卷有自己独立的生命周期，即使删掉了容器，数据卷也还会存在。</li></ul></li></ul><h1 id="alpine-设置时区" tabindex="-1"><a class="header-anchor" href="#alpine-设置时区"><span>alpine 设置时区</span></a></h1><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">RUN apk add tzdata &amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\</span>
<span class="line">    &amp;&amp; echo &quot;Asia/Shanghai&quot; &gt; /etc/timezone \\</span>
<span class="line">    &amp;&amp; apk del tzdata</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const c=e(t,[["render",s],["__file","docker_file.html.vue"]]),o=JSON.parse('{"path":"/common/docker/docker_file.html","title":"Dockerfile","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"指令文档","slug":"指令文档","link":"#指令文档","children":[]},{"level":2,"title":"常用指令","slug":"常用指令","link":"#常用指令","children":[]}],"git":{"updatedTime":1694661784000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"common/docker/docker_file.md"}');export{c as comp,o as data};
