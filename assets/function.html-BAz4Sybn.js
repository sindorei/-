import{_ as s,c as a,f as e,o as t}from"./app-LHpjaFTr.js";const p={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="函数" tabindex="-1"><a class="header-anchor" href="#函数"><span>函数</span></a></h1><h2 id="函数定义" tabindex="-1"><a class="header-anchor" href="#函数定义"><span>函数定义</span></a></h2><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token comment">// 函数定义</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> greeting <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Hello, &quot;</span></span> <span class="token operator">+</span> person <span class="token operator">+</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span></span>
<span class="line">    <span class="token keyword">return</span> greeting</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多重返回值函数" tabindex="-1"><a class="header-anchor" href="#多重返回值函数"><span>多重返回值函数</span></a></h2><ul><li>可以用元组（tuple）类型让多个值作为一个复合值从函数中返回</li></ul><h2 id="函数参数标签和参数名称" tabindex="-1"><a class="header-anchor" href="#函数参数标签和参数名称"><span>函数参数标签和参数名称</span></a></h2><p>每个函数参数都有一个参数标签（argument label）以及一个参数名称（parameter name）。参数标签在调用函数的时候使用；调用的时候需要将函数的参数标签写在对应的参数前面。参数名称在函数的实现中使用。默认情况下，函数参数使用参数名称来作为它们的参数标签。</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span>firstParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">someFunction</span><span class="token punctuation">(</span>firstParameterName<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的参数都必须有一个独一无二的名字。虽然多个参数拥有同样的参数标签是可能的，但是一个唯一的参数标签能够使你的代码更具可读性。</p><h2 id="指定参数标签" tabindex="-1"><a class="header-anchor" href="#指定参数标签"><span>指定参数标签</span></a></h2><p>可以在参数名称前指定它的参数标签，中间以空格分隔：</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span>argumentLabel parameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 在函数体内，parameterName 代表参数值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> from hometown<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;Hello </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">person</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">!  Glad you could visit from </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">hometown</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">.&quot;</span></span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">greet</span><span class="token punctuation">(</span>person<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Bill&quot;</span></span><span class="token punctuation">,</span> from<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;Cupertino&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="忽略参数标签" tabindex="-1"><a class="header-anchor" href="#忽略参数标签"><span>忽略参数标签</span></a></h2><p>如果不希望为某个参数添加一个标签，可以使用一个下划线（_）来代替一个明确的参数标签。</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> firstParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token comment">// 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">someFunction</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> secondParameterName<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果一个参数有一个标签，那么在调用的时候必须使用标签来标记这个参数。</p><h2 id="默认参数值" tabindex="-1"><a class="header-anchor" href="#默认参数值"><span>默认参数值</span></a></h2><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">someFunction</span><span class="token punctuation">(</span>parameterWithoutDefault<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> parameterWithDefault<span class="token punctuation">:</span> <span class="token class-name">Int</span> <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 如果你在调用时候不传第二个参数，parameterWithDefault 会值为 12 传入到函数体中。</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">someFunction</span><span class="token punctuation">(</span>parameterWithoutDefault<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> parameterWithDefault<span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">// parameterWithDefault = 6</span></span>
<span class="line"><span class="token function">someFunction</span><span class="token punctuation">(</span>parameterWithoutDefault<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment">// parameterWithDefault = 12</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可变参数" tabindex="-1"><a class="header-anchor" href="#可变参数"><span>可变参数</span></a></h2><p>一个可变参数（variadic parameter）可以接受零个或多个值。函数调用时，你可以用可变参数来指定函数参数可以被传入不确定数量的输入值。通过在变量类型名后面加入（...）的方式来定义可变参数。 可变参数的传入值在函数体中变为此类型的一个数组。例如，一个叫做 numbers 的 Double... 型可变参数，在函数体内可以当做一个叫 numbers 的 [Double] 型的数组常量。</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">arithmeticMean</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> numbers<span class="token punctuation">:</span> <span class="token class-name">Double</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Double</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> total<span class="token punctuation">:</span> <span class="token class-name">Double</span> <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> number <span class="token keyword">in</span> numbers <span class="token punctuation">{</span></span>
<span class="line">        total <span class="token operator">+=</span> number</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> total <span class="token operator">/</span> <span class="token class-name">Double</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>count<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">arithmeticMean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">arithmeticMean</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8.25</span><span class="token punctuation">,</span> <span class="token number">18.75</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意: 一个函数最多只能拥有一个可变参数。</p></blockquote><h2 id="输入输出参数" tabindex="-1"><a class="header-anchor" href="#输入输出参数"><span>输入输出参数</span></a></h2><p>函数参数默认是常量。试图在函数体中更改参数值将会导致编译错误。这意味着你不能错误地更改参数值。如果你想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为输入输出参数（In-Out Parameters）。 定义一个输入输出参数时，在参数定义前加 inout 关键字。一个 输入输出参数有传入函数的值，这个值被函数修改，然后被传出函数，替换原来的值。想获取更多的关于输入输出参数的细节和相关的编译器优化，请查看 输入输出参数 一节。 你只能传递变量给输入输出参数。你不能传入常量或者字面量，因为这些量是不能被修改的。当传入的参数作为输入输出参数时，需要在参数名前加 &amp; 符，表示这个值可以被函数修改。 注意 输入输出参数不能有默认值，而且可变参数不能用 inout 标记。 下例中，<code>swapTwoInts(_:_:)</code> 函数有两个分别叫做 a 和 b 的输入输出参数：</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">swapTwoInts</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token keyword">inout</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> temporaryA <span class="token operator">=</span> a</span>
<span class="line">    a <span class="token operator">=</span> b</span>
<span class="line">    b <span class="token operator">=</span> temporaryA</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>swapTwoInts(_:_:)</code> 函数简单地交换 <code>a</code> 与 <code>b</code> 的值。该函数先将 <code>a</code> 的值存到一个临时常量<code>temporaryA</code>中，然后将 <code>b</code> 的值赋给 <code>a</code>，最后将 <code>temporaryA</code> 赋值给 <code>b</code>。</p><p>你可以用两个 <code>Int</code> 型的变量来调用<code>swapTwoInts(_:_:)</code>。需要注意的是，<code>someInt</code> 和 <code>anotherInt</code> 在传入 <code>swapTwoInts(_:_:)</code>函数前，都加了 &amp; 的前缀：</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> someInt <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token keyword">var</span> anotherInt <span class="token operator">=</span> <span class="token number">107</span></span>
<span class="line"><span class="token function">swapTwoInts</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>someInt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>anotherInt<span class="token punctuation">)</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;someInt is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">someInt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">, and anotherInt is now </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">anotherInt</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面这个例子中，我们可以看到 someInt 和 anotherInt 的原始值在 swapTwoInts(<em>:</em>😃 函数中被修改，尽管它们的定义在函数体外。</p><blockquote><p>注意 输入输出参数和返回值是不一样的。上面的 <code>swapTwoInts</code> 函数并没有定义任何返回值，但仍然修改了 <code>someInt</code> 和 <code>anotherInt</code> 的值。输入输出参数是函数对函数体外产生影响的另一种方式。</p></blockquote><h2 id="函数类型" tabindex="-1"><a class="header-anchor" href="#函数类型"><span>函数类型</span></a></h2><p>每个函数都有种特定的函数类型，函数的类型由函数的参数类型和返回类型组成。 例如：</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">addTwoInts</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">multiplyTwoInts</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> a<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">,</span> <span class="token omit keyword">_</span> b<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">*</span> b</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子中定义了两个简单的数学函数：<code>addTwoInts</code> 和 <code>multiplyTwoInts</code>。这两个函数都接受两个<code>Int</code>值， 返回一个<code>Int</code>值。 这两个函数的类型是<code>(Int, Int) -&gt; Int</code>，可以解读为: “这个函数类型有两个<code>Int</code>型的参数并返回一个<code>Int</code>型的值”。 下面是另一个例子，一个没有参数，也没有返回值的函数：</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">printHelloWorld</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;hello, world&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数的类型是：<code>() -&gt; Void</code>，或者叫“没有参数，并返回 Void 类型的函数”。</p><h2 id="使用函数类型" tabindex="-1"><a class="header-anchor" href="#使用函数类型"><span>使用函数类型</span></a></h2><p>在 Swift 中，使用函数类型就像使用其他类型一样。例如，你可以定义一个类型为函数的常量或变量，并将适当的函数赋值给它：</p><p><code>var mathFunction: (Int, Int) -&gt; Int = addTwoInts</code></p><p>这段代码可以被解读为：</p><p>”定义一个叫做<code>mathFunction</code>的变量，类型是‘一个有两个<code>Int</code>型的参数并返回一个<code>Int</code>型的值的函数’，并让这个新变量指向 <code>addTwoInts</code>函数”。 <code>addTwoInts</code>和 <code>mathFunction</code>有同样的类型，所以这个赋值过程在 Swift 类型检查（type-check）中是允许的。 现在，你可以用<code>mathFunction</code>来调用被赋值的函数了：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">print(&quot;Result: \\(mathFunction(2, 3))&quot;)</span>
<span class="line">// Prints &quot;Result: 5&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>有相同匹配类型的不同函数可以被赋值给同一个变量，就像非函数类型的变量一样：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">mathFunction = multiplyTwoInts</span>
<span class="line">print(&quot;Result: \\(mathFunction(2, 3))&quot;)</span>
<span class="line">// Prints &quot;Result: 6&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像其他类型一样，当赋值一个函数给常量或变量时，你可以让 Swift 来推断其函数类型：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let anotherMathFunction = addTwoInts</span>
<span class="line">// anotherMathFunction 被推断为 (Int, Int) -&gt; Int 类型</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数类型作为参数类型" tabindex="-1"><a class="header-anchor" href="#函数类型作为参数类型"><span>函数类型作为参数类型</span></a></h2><p>你可以用<code>(Int, Int) -&gt; Int</code>这样的函数类型作为另一个函数的参数类型。这样你可以将函数的一部分实现留给函数的调用者来提供。</p><p>下面是另一个例子，正如上面的函数一样，同样是输出某种数学运算结果：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">func printMathResult(_ mathFunction: (Int, Int) -&gt; Int, _ a: Int, _ b: Int) {</span>
<span class="line">    print(&quot;Result: \\(mathFunction(a, b))&quot;)</span>
<span class="line">}</span>
<span class="line">printMathResult(addTwoInts, 3, 5)</span>
<span class="line">// 打印“Result: 8”</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子定义了<code>printMathResult(_:_:_:)</code>函数，它有三个参数：第一个参数叫<code>mathFunction</code>，类型是<code>(Int, Int) -&gt; Int</code>，你可以传入任何这种类型的函数；第二个和第三个参数叫<code>a</code>和<code>b</code>，它们的类型都是<code>Int</code>，这两个值作为已给出的函数的输入值。 当<code>printMathResult(_:_:_:)</code>被调用时，它被传入<code>addTwoInts</code>函数和整数 <code>3</code>和 <code>5</code>。它用传入 <code>3</code> 和 <code>5</code> 调用 <code>addTwoInts</code>，并输出结果：<code>8</code>。 <code>printMathResult(_:_:_:)</code>函数的作用就是输出另一个适当类型的数学函数的调用结果。它不关心传入函数是如何实现的，只关心传入的函数是不是一个正确的类型。这使得<code>printMathResult(_:_:_:)</code>能以一种类型安全（type-safe）的方式将一部分功能转给调用者实现。</p><h2 id="函数类型作为返回类型" tabindex="-1"><a class="header-anchor" href="#函数类型作为返回类型"><span>函数类型作为返回类型</span></a></h2><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">stepForward</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> input <span class="token operator">+</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function-definition function">stepBackward</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> input <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> backward <span class="token operator">?</span> stepBackward <span class="token punctuation">:</span> stepForward</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">var</span> currentValue <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token keyword">let</span> moveNearerToZero <span class="token operator">=</span> <span class="token function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> currentValue <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// moveNearerToZero 现在指向 stepBackward() 函数。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Counting to zero:&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// Counting to zero:</span></span>
<span class="line"><span class="token keyword">while</span> currentValue <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">currentValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">... &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    currentValue <span class="token operator">=</span> <span class="token function">moveNearerToZero</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;zero!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 3...</span></span>
<span class="line"><span class="token comment">// 2...</span></span>
<span class="line"><span class="token comment">// 1...</span></span>
<span class="line"><span class="token comment">// zero!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="嵌套函数" tabindex="-1"><a class="header-anchor" href="#嵌套函数"><span>嵌套函数</span></a></h3><p>到目前为止本章中你所见到的所有函数都叫全局函数（global functions），它们定义在全局域中。你也可以把函数定义在别的函数体中，称作 嵌套函数（nested functions）。 默认情况下，嵌套函数是对外界不可见的，但是可以被它们的外围函数（enclosing function）调用。一个外围函数也可以返回它的某一个嵌套函数，使得这个函数可以在其他域中被使用。 你可以用返回嵌套函数的方式重写 <code>chooseStepFunction(backward:)</code> 函数：</p><div class="language-swift line-numbers-mode" data-highlighter="prismjs" data-ext="swift" data-title="swift"><pre><code><span class="line"><span class="token keyword">func</span> <span class="token function-definition function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> <span class="token class-name">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">stepForward</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> input <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">func</span> <span class="token function-definition function">stepBackward</span><span class="token punctuation">(</span>input<span class="token punctuation">:</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Int</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> input <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> backward <span class="token operator">?</span> stepBackward <span class="token punctuation">:</span> stepForward</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> currentValue <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span></span>
<span class="line"><span class="token keyword">let</span> moveNearerToZero <span class="token operator">=</span> <span class="token function">chooseStepFunction</span><span class="token punctuation">(</span>backward<span class="token punctuation">:</span> currentValue <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// moveNearerToZero now refers to the nested stepForward() function</span></span>
<span class="line"><span class="token keyword">while</span> currentValue <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;</span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">currentValue</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">... &quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    currentValue <span class="token operator">=</span> <span class="token function">moveNearerToZero</span><span class="token punctuation">(</span>currentValue<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;zero!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// -4...</span></span>
<span class="line"><span class="token comment">// -3...</span></span>
<span class="line"><span class="token comment">// -2...</span></span>
<span class="line"><span class="token comment">// -1...</span></span>
<span class="line"><span class="token comment">// zero!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,60)]))}const i=s(p,[["render",o],["__file","function.html.vue"]]),u=JSON.parse('{"path":"/pl/swift/function.html","title":"函数","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"函数定义","slug":"函数定义","link":"#函数定义","children":[]},{"level":2,"title":"多重返回值函数","slug":"多重返回值函数","link":"#多重返回值函数","children":[]},{"level":2,"title":"函数参数标签和参数名称","slug":"函数参数标签和参数名称","link":"#函数参数标签和参数名称","children":[]},{"level":2,"title":"指定参数标签","slug":"指定参数标签","link":"#指定参数标签","children":[]},{"level":2,"title":"忽略参数标签","slug":"忽略参数标签","link":"#忽略参数标签","children":[]},{"level":2,"title":"默认参数值","slug":"默认参数值","link":"#默认参数值","children":[]},{"level":2,"title":"可变参数","slug":"可变参数","link":"#可变参数","children":[]},{"level":2,"title":"输入输出参数","slug":"输入输出参数","link":"#输入输出参数","children":[]},{"level":2,"title":"函数类型","slug":"函数类型","link":"#函数类型","children":[]},{"level":2,"title":"使用函数类型","slug":"使用函数类型","link":"#使用函数类型","children":[]},{"level":2,"title":"函数类型作为参数类型","slug":"函数类型作为参数类型","link":"#函数类型作为参数类型","children":[]},{"level":2,"title":"函数类型作为返回类型","slug":"函数类型作为返回类型","link":"#函数类型作为返回类型","children":[{"level":3,"title":"嵌套函数","slug":"嵌套函数","link":"#嵌套函数","children":[]}]}],"git":{"updatedTime":1669361850000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":13,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/swift/function.md"}');export{i as comp,u as data};
