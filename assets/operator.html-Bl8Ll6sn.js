import{_ as l,c as i,f as a,o as n}from"./app-LHpjaFTr.js";const s={};function d(c,e){return n(),i("div",null,e[0]||(e[0]=[a(`<h1 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h1><h2 id="算术运算符" tabindex="-1"><a class="header-anchor" href="#算术运算符"><span>算术运算符</span></a></h2><ul><li><code>+</code> 加</li><li><code>-</code> 减</li><li><code>*</code> 乘</li><li><code>/</code> 除</li><li><code>%</code> 取余</li><li><code>^</code> 乘幂</li><li><code>-</code> 负号</li><li><code>//</code> 整除运算符(&gt;=lua5.3)</li></ul><h2 id="关系运算符" tabindex="-1"><a class="header-anchor" href="#关系运算符"><span>关系运算符</span></a></h2><ul><li><code>==</code></li><li><code>~=</code> 不等于</li><li><code>&gt;</code></li><li><code>&lt;</code></li><li><code>&gt;=</code></li><li><code>&lt;=</code></li></ul><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符"><span>逻辑运算符</span></a></h2><ul><li><code>and</code></li><li><code>or</code></li><li><code>not</code></li></ul><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符"><span>位运算符</span></a></h2><ul><li><code>&amp;</code>: bitwise AND</li><li><code>|</code>: bitwise OR</li><li><code>~</code>: bitwise exclusive OR</li><li><code>&gt;&gt;</code>: right shift</li><li><code>&lt;&lt;</code>: left shift</li><li><code>~</code>: unary bitwise NOT</li></ul><h2 id="其他运算符" tabindex="-1"><a class="header-anchor" href="#其他运算符"><span>其他运算符</span></a></h2><ul><li><code>..</code> 连接2个字符串</li><li><code>#</code> 一元运算符，返回字符串或表的长度</li></ul><h2 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h2><p>从低到高：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">or</span>
<span class="line">and</span>
<span class="line">&lt;     &gt;     &lt;=    &gt;=    ~=    ==</span>
<span class="line">|</span>
<span class="line">~</span>
<span class="line">&amp;</span>
<span class="line">&lt;&lt;    &gt;&gt;</span>
<span class="line">..</span>
<span class="line">+     -</span>
<span class="line">*     /     //    %</span>
<span class="line">unary operators (not   #     -     ~)</span>
<span class="line">^</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14)]))}const o=l(s,[["render",d],["__file","operator.html.vue"]]),r=JSON.parse('{"path":"/pl/lua/operator.html","title":"运算符","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"算术运算符","slug":"算术运算符","link":"#算术运算符","children":[]},{"level":2,"title":"关系运算符","slug":"关系运算符","link":"#关系运算符","children":[]},{"level":2,"title":"逻辑运算符","slug":"逻辑运算符","link":"#逻辑运算符","children":[]},{"level":2,"title":"位运算符","slug":"位运算符","link":"#位运算符","children":[]},{"level":2,"title":"其他运算符","slug":"其他运算符","link":"#其他运算符","children":[]},{"level":2,"title":"运算符优先级","slug":"运算符优先级","link":"#运算符优先级","children":[]}],"git":{"updatedTime":1674022245000,"contributors":[{"name":"sindorei","email":"wupan1030@foxmail.com","commits":1,"url":"https://github.com/sindorei"}]},"filePathRelative":"pl/lua/operator.md"}');export{o as comp,r as data};
